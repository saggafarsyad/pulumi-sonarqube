{
    "name": "sonarqube",
    "description": "A Pulumi package for creating and managing sonarqube cloud resources.",
    "keywords": [
        "saggafarsyad",
        "sonarqube",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`sonarqube` Terraform Provider](https://github.com/jdamata/terraform-provider-sonarqube).",
    "repository": "https://github.com/saggafarsyad/pulumi-sonarqube",
    "publisher": "saggafarsyad",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing sonarqube cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/jdamata/terraform-provider-sonarqube)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sonarqube` repo](https://github.com/saggafarsyad/pulumi-sonarqube/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sonarqube` repo](https://github.com/jdamata/terraform-provider-sonarqube/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/jdamata/terraform-provider-sonarqube)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sonarqube` repo](https://github.com/saggafarsyad/pulumi-sonarqube/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sonarqube` repo](https://github.com/jdamata/terraform-provider-sonarqube/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "anonymizeUserOnDelete": {
                "type": "boolean",
                "description": "Allows anonymizing users on destroy. Requires Sonarqube version \u003e= 9.7.\n"
            },
            "host": {
                "type": "string"
            },
            "httpProxy": {
                "type": "string"
            },
            "installedEdition": {
                "type": "string"
            },
            "installedVersion": {
                "type": "string"
            },
            "pass": {
                "type": "string",
                "secret": true
            },
            "tlsInsecureSkipVerify": {
                "type": "boolean",
                "description": "Allows ignoring insecure certificates when set to true. Defaults to false. Disabling TLS verification is dangerous and\nshould only be done for local testing.\n"
            },
            "token": {
                "type": "string",
                "secret": true
            },
            "user": {
                "type": "string"
            }
        },
        "defaults": [
            "host"
        ]
    },
    "types": {
        "sonarqube:index/PortfolioSelectedProject:PortfolioSelectedProject": {
            "properties": {
                "projectKey": {
                    "type": "string",
                    "description": "The key of a project to add to the portfolio\n"
                },
                "selectedBranches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of branches of the project to add to the portfolio. Defaults to the `MAIN BRANCH` of the repo if omitted\n\nHere is an example of how this option can be leveraged:\n\n"
                }
            },
            "type": "object",
            "required": [
                "projectKey"
            ]
        },
        "sonarqube:index/ProjectSetting:ProjectSetting": {
            "properties": {
                "fieldValues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "Setting field values for the supplied key\n"
                },
                "key": {
                    "type": "string",
                    "description": "Setting key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Setting a value for the supplied key\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Setting multi values for the supplied key\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "sonarqube:index/QualitygateCondition:QualitygateCondition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "op": {
                    "type": "string"
                },
                "threshold": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metric",
                "op",
                "threshold"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "metric",
                        "op",
                        "threshold"
                    ]
                }
            }
        },
        "sonarqube:index/getQualitygateCondition:getQualitygateCondition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "op": {
                    "type": "string"
                },
                "threshold": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "metric",
                "op",
                "threshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the sonarqube package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "anonymizeUserOnDelete": {
                "type": "boolean",
                "description": "Allows anonymizing users on destroy. Requires Sonarqube version \u003e= 9.7.\n"
            },
            "host": {
                "type": "string"
            },
            "httpProxy": {
                "type": "string"
            },
            "installedEdition": {
                "type": "string"
            },
            "installedVersion": {
                "type": "string"
            },
            "pass": {
                "type": "string",
                "secret": true
            },
            "tlsInsecureSkipVerify": {
                "type": "boolean",
                "description": "Allows ignoring insecure certificates when set to true. Defaults to false. Disabling TLS verification is dangerous and\nshould only be done for local testing.\n"
            },
            "token": {
                "type": "string",
                "secret": true
            },
            "user": {
                "type": "string"
            }
        },
        "required": [
            "host"
        ],
        "inputProperties": {
            "anonymizeUserOnDelete": {
                "type": "boolean",
                "description": "Allows anonymizing users on destroy. Requires Sonarqube version \u003e= 9.7.\n"
            },
            "host": {
                "type": "string"
            },
            "httpProxy": {
                "type": "string"
            },
            "installedEdition": {
                "type": "string"
            },
            "installedVersion": {
                "type": "string"
            },
            "pass": {
                "type": "string",
                "secret": true
            },
            "tlsInsecureSkipVerify": {
                "type": "boolean",
                "description": "Allows ignoring insecure certificates when set to true. Defaults to false. Disabling TLS verification is dangerous and\nshould only be done for local testing.\n"
            },
            "token": {
                "type": "string",
                "secret": true
            },
            "user": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "host"
        ]
    },
    "resources": {
        "sonarqube:index/almAzure:AlmAzure": {
            "description": "## # sonarqube.AlmAzure\n\nProvides a Sonarqube Azure Devops Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops\nPlatform Integration for Azure Devops.\n\n## Example: Create an Azure Devops Alm Integration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst az1 = new sonarqube.AlmAzure(\"az1\", {\n    key: \"az1\",\n    personalAccessToken: \"my_pat\",\n    url: \"https://dev.azure.com/my-org\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\naz1 = sonarqube.AlmAzure(\"az1\",\n    key=\"az1\",\n    personal_access_token=\"my_pat\",\n    url=\"https://dev.azure.com/my-org\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var az1 = new Sonarqube.AlmAzure(\"az1\", new()\n    {\n        Key = \"az1\",\n        PersonalAccessToken = \"my_pat\",\n        Url = \"https://dev.azure.com/my-org\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewAlmAzure(ctx, \"az1\", \u0026sonarqube.AlmAzureArgs{\n\t\t\tKey:                 pulumi.String(\"az1\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"my_pat\"),\n\t\t\tUrl:                 pulumi.String(\"https://dev.azure.com/my-org\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.AlmAzure;\nimport com.pulumi.sonarqube.AlmAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var az1 = new AlmAzure(\"az1\", AlmAzureArgs.builder()        \n            .key(\"az1\")\n            .personalAccessToken(\"my_pat\")\n            .url(\"https://dev.azure.com/my-org\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  az1:\n    type: sonarqube:AlmAzure\n    properties:\n      key: az1\n      personalAccessToken: my_pat\n      url: https://dev.azure.com/my-org\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nResource can be imported providing their Alm Instance Key and Azure DevOps Personal Access Token\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/almAzure:AlmAzure az1 key/personal_access_token\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Unique key of the Azure Devops instance setting\n"
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "Azure Devops personal access token\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Azure API URL\n"
                }
            },
            "required": [
                "key",
                "personalAccessToken",
                "url"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Unique key of the Azure Devops instance setting\n",
                    "willReplaceOnChanges": true
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "Azure Devops personal access token\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Azure API URL\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key",
                "personalAccessToken",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlmAzure resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Unique key of the Azure Devops instance setting\n",
                        "willReplaceOnChanges": true
                    },
                    "personalAccessToken": {
                        "type": "string",
                        "description": "Azure Devops personal access token\n",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "Azure API URL\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/almGithub:AlmGithub": {
            "description": "## # sonarqube.AlmGithub\n\nProvides a Sonarqube GitHub Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops\nPlatform Integration for GitHub.\n\n## Example: Create a GitHub Alm Integration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst github_alm = new sonarqube.AlmGithub(\"github-alm\", {\n    appId: \"12345\",\n    clientId: \"56789\",\n    clientSecret: \"secret\",\n    key: \"myalm\",\n    privateKey: \"myprivate_key\",\n    url: \"https://api.github.com\",\n    webhookSecret: \"mysecret\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ngithub_alm = sonarqube.AlmGithub(\"github-alm\",\n    app_id=\"12345\",\n    client_id=\"56789\",\n    client_secret=\"secret\",\n    key=\"myalm\",\n    private_key=\"myprivate_key\",\n    url=\"https://api.github.com\",\n    webhook_secret=\"mysecret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var github_alm = new Sonarqube.AlmGithub(\"github-alm\", new()\n    {\n        AppId = \"12345\",\n        ClientId = \"56789\",\n        ClientSecret = \"secret\",\n        Key = \"myalm\",\n        PrivateKey = \"myprivate_key\",\n        Url = \"https://api.github.com\",\n        WebhookSecret = \"mysecret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewAlmGithub(ctx, \"github-alm\", \u0026sonarqube.AlmGithubArgs{\n\t\t\tAppId:         pulumi.String(\"12345\"),\n\t\t\tClientId:      pulumi.String(\"56789\"),\n\t\t\tClientSecret:  pulumi.String(\"secret\"),\n\t\t\tKey:           pulumi.String(\"myalm\"),\n\t\t\tPrivateKey:    pulumi.String(\"myprivate_key\"),\n\t\t\tUrl:           pulumi.String(\"https://api.github.com\"),\n\t\t\tWebhookSecret: pulumi.String(\"mysecret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.AlmGithub;\nimport com.pulumi.sonarqube.AlmGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var github_alm = new AlmGithub(\"github-alm\", AlmGithubArgs.builder()        \n            .appId(\"12345\")\n            .clientId(\"56789\")\n            .clientSecret(\"secret\")\n            .key(\"myalm\")\n            .privateKey(\"myprivate_key\")\n            .url(\"https://api.github.com\")\n            .webhookSecret(\"mysecret\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  github-alm:\n    type: sonarqube:AlmGithub\n    properties:\n      appId: '12345'\n      clientId: '56789'\n      clientSecret: secret\n      key: myalm\n      privateKey: myprivate_key\n      url: https://api.github.com\n      webhookSecret: mysecret\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "appId": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "webhookSecret": {
                    "type": "string"
                }
            },
            "required": [
                "appId",
                "clientId",
                "clientSecret",
                "key",
                "privateKey",
                "url"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "clientId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "clientSecret": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "privateKey": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "webhookSecret": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "appId",
                "clientId",
                "clientSecret",
                "key",
                "privateKey",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlmGithub resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "clientId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "clientSecret": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "privateKey": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "webhookSecret": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/almGitlab:AlmGitlab": {
            "description": "## # sonarqube.AlmGitlab\n\nProvides a Sonarqube GitLab Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops\nPlatform Integration for GitLab.\n\n## Example: Create a GitHub Alm Integration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst gitlab_alm = new sonarqube.AlmGitlab(\"gitlab-alm\", {\n    key: \"myalm\",\n    personalAccessToken: \"my_personal_access_token\",\n    url: \"https://gitlab.com/api/v4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ngitlab_alm = sonarqube.AlmGitlab(\"gitlab-alm\",\n    key=\"myalm\",\n    personal_access_token=\"my_personal_access_token\",\n    url=\"https://gitlab.com/api/v4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gitlab_alm = new Sonarqube.AlmGitlab(\"gitlab-alm\", new()\n    {\n        Key = \"myalm\",\n        PersonalAccessToken = \"my_personal_access_token\",\n        Url = \"https://gitlab.com/api/v4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewAlmGitlab(ctx, \"gitlab-alm\", \u0026sonarqube.AlmGitlabArgs{\n\t\t\tKey:                 pulumi.String(\"myalm\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"my_personal_access_token\"),\n\t\t\tUrl:                 pulumi.String(\"https://gitlab.com/api/v4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.AlmGitlab;\nimport com.pulumi.sonarqube.AlmGitlabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gitlab_alm = new AlmGitlab(\"gitlab-alm\", AlmGitlabArgs.builder()        \n            .key(\"myalm\")\n            .personalAccessToken(\"my_personal_access_token\")\n            .url(\"https://gitlab.com/api/v4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gitlab-alm:\n    type: sonarqube:AlmGitlab\n    properties:\n      key: myalm\n      personalAccessToken: my_personal_access_token\n      url: https://gitlab.com/api/v4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "key": {
                    "type": "string"
                },
                "personalAccessToken": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "key",
                "personalAccessToken",
                "url"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "personalAccessToken": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "key",
                "personalAccessToken",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlmGitlab resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "personalAccessToken": {
                        "type": "string",
                        "secret": true
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/azureBinding:AzureBinding": {
            "description": "## # sonarqube.AzureBinding\n\nProvides a Sonarqube Azure Devops binding resource. This can be used to create and manage the binding between an\nAzure Devops repository and a SonarQube project\n\n## Example: Create an Azure Devops binding\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst az1 = new sonarqube.AlmAzure(\"az1\", {\n    key: \"az1\",\n    personalAccessToken: \"my_pat\",\n    url: \"https://dev.azure.com/my-org\",\n});\nconst mainProject = new sonarqube.Project(\"mainProject\", {\n    project: \"main\",\n    visibility: \"public\",\n});\nconst mainAzureBinding = new sonarqube.AzureBinding(\"mainAzureBinding\", {\n    almSetting: az1.key,\n    project: mainProject.project,\n    projectName: \"my_azure_project\",\n    repositoryName: \"my_repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\naz1 = sonarqube.AlmAzure(\"az1\",\n    key=\"az1\",\n    personal_access_token=\"my_pat\",\n    url=\"https://dev.azure.com/my-org\")\nmain_project = sonarqube.Project(\"mainProject\",\n    project=\"main\",\n    visibility=\"public\")\nmain_azure_binding = sonarqube.AzureBinding(\"mainAzureBinding\",\n    alm_setting=az1.key,\n    project=main_project.project,\n    project_name=\"my_azure_project\",\n    repository_name=\"my_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var az1 = new Sonarqube.AlmAzure(\"az1\", new()\n    {\n        Key = \"az1\",\n        PersonalAccessToken = \"my_pat\",\n        Url = \"https://dev.azure.com/my-org\",\n    });\n\n    var mainProject = new Sonarqube.Project(\"mainProject\", new()\n    {\n        ProjectName = \"main\",\n        Visibility = \"public\",\n    });\n\n    var mainAzureBinding = new Sonarqube.AzureBinding(\"mainAzureBinding\", new()\n    {\n        AlmSetting = az1.Key,\n        Project = mainProject.ProjectName,\n        ProjectName = \"my_azure_project\",\n        RepositoryName = \"my_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taz1, err := sonarqube.NewAlmAzure(ctx, \"az1\", \u0026sonarqube.AlmAzureArgs{\n\t\t\tKey:                 pulumi.String(\"az1\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"my_pat\"),\n\t\t\tUrl:                 pulumi.String(\"https://dev.azure.com/my-org\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainProject, err := sonarqube.NewProject(ctx, \"mainProject\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"main\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewAzureBinding(ctx, \"mainAzureBinding\", \u0026sonarqube.AzureBindingArgs{\n\t\t\tAlmSetting:     az1.Key,\n\t\t\tProject:        mainProject.Project,\n\t\t\tProjectName:    pulumi.String(\"my_azure_project\"),\n\t\t\tRepositoryName: pulumi.String(\"my_repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.AlmAzure;\nimport com.pulumi.sonarqube.AlmAzureArgs;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.AzureBinding;\nimport com.pulumi.sonarqube.AzureBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var az1 = new AlmAzure(\"az1\", AlmAzureArgs.builder()        \n            .key(\"az1\")\n            .personalAccessToken(\"my_pat\")\n            .url(\"https://dev.azure.com/my-org\")\n            .build());\n\n        var mainProject = new Project(\"mainProject\", ProjectArgs.builder()        \n            .project(\"main\")\n            .visibility(\"public\")\n            .build());\n\n        var mainAzureBinding = new AzureBinding(\"mainAzureBinding\", AzureBindingArgs.builder()        \n            .almSetting(az1.key())\n            .project(mainProject.project())\n            .projectName(\"my_azure_project\")\n            .repositoryName(\"my_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  az1:\n    type: sonarqube:AlmAzure\n    properties:\n      key: az1\n      personalAccessToken: my_pat\n      url: https://dev.azure.com/my-org\n  mainProject:\n    type: sonarqube:Project\n    properties:\n      project: main\n      visibility: public\n  mainAzureBinding:\n    type: sonarqube:AzureBinding\n    properties:\n      almSetting: ${az1.key}\n      project: ${mainProject.project}\n      projectName: my_azure_project\n      repositoryName: my_repo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBindings can be imported using their ID\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/azureBinding:AzureBinding main project/project_name/repository\n```\n\n",
            "properties": {
                "almSetting": {
                    "type": "string",
                    "description": "Azure DevOps setting key\n"
                },
                "monorepo": {
                    "type": "boolean",
                    "description": "Is this project part of a monorepo\n"
                },
                "project": {
                    "type": "string",
                    "description": "SonarQube project key\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Azure project name\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "Azure repository name\n"
                }
            },
            "required": [
                "almSetting",
                "project",
                "projectName",
                "repositoryName"
            ],
            "inputProperties": {
                "almSetting": {
                    "type": "string",
                    "description": "Azure DevOps setting key\n",
                    "willReplaceOnChanges": true
                },
                "monorepo": {
                    "type": "boolean",
                    "description": "Is this project part of a monorepo\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "SonarQube project key\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "Azure project name\n",
                    "willReplaceOnChanges": true
                },
                "repositoryName": {
                    "type": "string",
                    "description": "Azure repository name\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "almSetting",
                "project",
                "projectName",
                "repositoryName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureBinding resources.\n",
                "properties": {
                    "almSetting": {
                        "type": "string",
                        "description": "Azure DevOps setting key\n",
                        "willReplaceOnChanges": true
                    },
                    "monorepo": {
                        "type": "boolean",
                        "description": "Is this project part of a monorepo\n",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "description": "SonarQube project key\n",
                        "willReplaceOnChanges": true
                    },
                    "projectName": {
                        "type": "string",
                        "description": "Azure project name\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryName": {
                        "type": "string",
                        "description": "Azure repository name\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/githubBinding:GithubBinding": {
            "description": "## # sonarqube.GithubBinding\n\nProvides a Sonarqube GitHub binding resource. This can be used to create and manage the binding between a\nGitHub repository and a SonarQube project\n\n## Example: Create a GitHub binding\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst github_alm = new sonarqube.AlmGithub(\"github-alm\", {\n    appId: \"12345\",\n    clientId: \"56789\",\n    clientSecret: \"secret\",\n    key: \"myalm\",\n    privateKey: \"myprivate_key\",\n    url: \"https://api.github.com\",\n    webhookSecret: \"mysecret\",\n});\nconst main = new sonarqube.Project(\"main\", {\n    project: \"my_project\",\n    visibility: \"public\",\n});\nconst github_binding = new sonarqube.GithubBinding(\"github-binding\", {\n    almSetting: github_alm.key,\n    project: \"my_project\",\n    repository: \"myorg/myrepo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ngithub_alm = sonarqube.AlmGithub(\"github-alm\",\n    app_id=\"12345\",\n    client_id=\"56789\",\n    client_secret=\"secret\",\n    key=\"myalm\",\n    private_key=\"myprivate_key\",\n    url=\"https://api.github.com\",\n    webhook_secret=\"mysecret\")\nmain = sonarqube.Project(\"main\",\n    project=\"my_project\",\n    visibility=\"public\")\ngithub_binding = sonarqube.GithubBinding(\"github-binding\",\n    alm_setting=github_alm.key,\n    project=\"my_project\",\n    repository=\"myorg/myrepo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var github_alm = new Sonarqube.AlmGithub(\"github-alm\", new()\n    {\n        AppId = \"12345\",\n        ClientId = \"56789\",\n        ClientSecret = \"secret\",\n        Key = \"myalm\",\n        PrivateKey = \"myprivate_key\",\n        Url = \"https://api.github.com\",\n        WebhookSecret = \"mysecret\",\n    });\n\n    var main = new Sonarqube.Project(\"main\", new()\n    {\n        ProjectName = \"my_project\",\n        Visibility = \"public\",\n    });\n\n    var github_binding = new Sonarqube.GithubBinding(\"github-binding\", new()\n    {\n        AlmSetting = github_alm.Key,\n        Project = \"my_project\",\n        Repository = \"myorg/myrepo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewAlmGithub(ctx, \"github-alm\", \u0026sonarqube.AlmGithubArgs{\n\t\t\tAppId:         pulumi.String(\"12345\"),\n\t\t\tClientId:      pulumi.String(\"56789\"),\n\t\t\tClientSecret:  pulumi.String(\"secret\"),\n\t\t\tKey:           pulumi.String(\"myalm\"),\n\t\t\tPrivateKey:    pulumi.String(\"myprivate_key\"),\n\t\t\tUrl:           pulumi.String(\"https://api.github.com\"),\n\t\t\tWebhookSecret: pulumi.String(\"mysecret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewProject(ctx, \"main\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewGithubBinding(ctx, \"github-binding\", \u0026sonarqube.GithubBindingArgs{\n\t\t\tAlmSetting: github_alm.Key,\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tRepository: pulumi.String(\"myorg/myrepo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.AlmGithub;\nimport com.pulumi.sonarqube.AlmGithubArgs;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.GithubBinding;\nimport com.pulumi.sonarqube.GithubBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var github_alm = new AlmGithub(\"github-alm\", AlmGithubArgs.builder()        \n            .appId(\"12345\")\n            .clientId(\"56789\")\n            .clientSecret(\"secret\")\n            .key(\"myalm\")\n            .privateKey(\"myprivate_key\")\n            .url(\"https://api.github.com\")\n            .webhookSecret(\"mysecret\")\n            .build());\n\n        var main = new Project(\"main\", ProjectArgs.builder()        \n            .project(\"my_project\")\n            .visibility(\"public\")\n            .build());\n\n        var github_binding = new GithubBinding(\"github-binding\", GithubBindingArgs.builder()        \n            .almSetting(github_alm.key())\n            .project(\"my_project\")\n            .repository(\"myorg/myrepo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  github-alm:\n    type: sonarqube:AlmGithub\n    properties:\n      appId: '12345'\n      clientId: '56789'\n      clientSecret: secret\n      key: myalm\n      privateKey: myprivate_key\n      url: https://api.github.com\n      webhookSecret: mysecret\n  main:\n    type: sonarqube:Project\n    properties:\n      project: my_project\n      visibility: public\n  github-binding:\n    type: sonarqube:GithubBinding\n    properties:\n      almSetting: ${[\"github-alm\"].key}\n      project: my_project\n      repository: myorg/myrepo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBindings can be imported using their ID\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/githubBinding:GithubBinding github-binding project/repository\n```\n\n",
            "properties": {
                "almSetting": {
                    "type": "string"
                },
                "monorepo": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                },
                "summaryCommentEnabled": {
                    "type": "string"
                }
            },
            "required": [
                "almSetting",
                "project",
                "repository"
            ],
            "inputProperties": {
                "almSetting": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "monorepo": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "summaryCommentEnabled": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "almSetting",
                "project",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GithubBinding resources.\n",
                "properties": {
                    "almSetting": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "monorepo": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "summaryCommentEnabled": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/gitlabBinding:GitlabBinding": {
            "description": "## # sonarqube.GitlabBinding\n\nProvides a Sonarqube GitLab binding resource. This can be used to create and manage the binding between a\nGitLab repository and a SonarQube project\n\n## Example: Create a GitLab binding\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst gitlab_alm = new sonarqube.AlmGitlab(\"gitlab-alm\", {\n    key: \"myalm\",\n    personalAccessToken: \"my_personal_access_token\",\n    url: \"https://gitlab.com/api/v4\",\n});\nconst main = new sonarqube.Project(\"main\", {\n    project: \"my_project\",\n    visibility: \"public\",\n});\nconst gitlab_binding = new sonarqube.GitlabBinding(\"gitlab-binding\", {\n    almSetting: gitlab_alm.key,\n    project: \"my_project\",\n    repository: \"123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ngitlab_alm = sonarqube.AlmGitlab(\"gitlab-alm\",\n    key=\"myalm\",\n    personal_access_token=\"my_personal_access_token\",\n    url=\"https://gitlab.com/api/v4\")\nmain = sonarqube.Project(\"main\",\n    project=\"my_project\",\n    visibility=\"public\")\ngitlab_binding = sonarqube.GitlabBinding(\"gitlab-binding\",\n    alm_setting=gitlab_alm.key,\n    project=\"my_project\",\n    repository=\"123\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gitlab_alm = new Sonarqube.AlmGitlab(\"gitlab-alm\", new()\n    {\n        Key = \"myalm\",\n        PersonalAccessToken = \"my_personal_access_token\",\n        Url = \"https://gitlab.com/api/v4\",\n    });\n\n    var main = new Sonarqube.Project(\"main\", new()\n    {\n        ProjectName = \"my_project\",\n        Visibility = \"public\",\n    });\n\n    var gitlab_binding = new Sonarqube.GitlabBinding(\"gitlab-binding\", new()\n    {\n        AlmSetting = gitlab_alm.Key,\n        Project = \"my_project\",\n        Repository = \"123\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewAlmGitlab(ctx, \"gitlab-alm\", \u0026sonarqube.AlmGitlabArgs{\n\t\t\tKey:                 pulumi.String(\"myalm\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"my_personal_access_token\"),\n\t\t\tUrl:                 pulumi.String(\"https://gitlab.com/api/v4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewProject(ctx, \"main\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewGitlabBinding(ctx, \"gitlab-binding\", \u0026sonarqube.GitlabBindingArgs{\n\t\t\tAlmSetting: gitlab_alm.Key,\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tRepository: pulumi.String(\"123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.AlmGitlab;\nimport com.pulumi.sonarqube.AlmGitlabArgs;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.GitlabBinding;\nimport com.pulumi.sonarqube.GitlabBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gitlab_alm = new AlmGitlab(\"gitlab-alm\", AlmGitlabArgs.builder()        \n            .key(\"myalm\")\n            .personalAccessToken(\"my_personal_access_token\")\n            .url(\"https://gitlab.com/api/v4\")\n            .build());\n\n        var main = new Project(\"main\", ProjectArgs.builder()        \n            .project(\"my_project\")\n            .visibility(\"public\")\n            .build());\n\n        var gitlab_binding = new GitlabBinding(\"gitlab-binding\", GitlabBindingArgs.builder()        \n            .almSetting(gitlab_alm.key())\n            .project(\"my_project\")\n            .repository(\"123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gitlab-alm:\n    type: sonarqube:AlmGitlab\n    properties:\n      key: myalm\n      personalAccessToken: my_personal_access_token\n      url: https://gitlab.com/api/v4\n  main:\n    type: sonarqube:Project\n    properties:\n      project: my_project\n      visibility: public\n  gitlab-binding:\n    type: sonarqube:GitlabBinding\n    properties:\n      almSetting: ${[\"gitlab-alm\"].key}\n      project: my_project\n      repository: '123'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBindings can be imported using their ID\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/gitlabBinding:GitlabBinding gitlab-binding project/repository\n```\n\n",
            "properties": {
                "almSetting": {
                    "type": "string"
                },
                "monorepo": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                }
            },
            "required": [
                "almSetting",
                "project",
                "repository"
            ],
            "inputProperties": {
                "almSetting": {
                    "type": "string"
                },
                "monorepo": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "almSetting",
                "project",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitlabBinding resources.\n",
                "properties": {
                    "almSetting": {
                        "type": "string"
                    },
                    "monorepo": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/group:Group": {
            "description": "## # sonarqube.Group\n\nProvides a Sonarqube Group resource. This can be used to create and manage Sonarqube Groups.\n\n## Example: create a group\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst projectUsers = new sonarqube.Group(\"projectUsers\", {description: \"This is a group\"});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nproject_users = sonarqube.Group(\"projectUsers\", description=\"This is a group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projectUsers = new Sonarqube.Group(\"projectUsers\", new()\n    {\n        Description = \"This is a group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewGroup(ctx, \"projectUsers\", \u0026sonarqube.GroupArgs{\n\t\t\tDescription: pulumi.String(\"This is a group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Group;\nimport com.pulumi.sonarqube.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var projectUsers = new Group(\"projectUsers\", GroupArgs.builder()        \n            .description(\"This is a group\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  projectUsers:\n    type: sonarqube:Group\n    properties:\n      description: This is a group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGroups can be imported using their ID, and only support in the Sonarqube version \u003c= 9.9\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/group:Group group 101\n```\n\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/groupMember:GroupMember": {
            "description": "## # sonarqube.GroupMember\n\nProvides a Sonarqube Group Member resource. This can be used to add or remove user to or from Sonarqube Groups.\n\n## Example: add a user to a group\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst user = new sonarqube.User(\"user\", {\n    loginName: \"terraform-test\",\n    password: \"secret-sauce37!\",\n});\nconst projectUsers = new sonarqube.Group(\"projectUsers\", {description: \"This is a group\"});\nconst projectUsersMember = new sonarqube.GroupMember(\"projectUsersMember\", {loginName: user.loginName});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nuser = sonarqube.User(\"user\",\n    login_name=\"terraform-test\",\n    password=\"secret-sauce37!\")\nproject_users = sonarqube.Group(\"projectUsers\", description=\"This is a group\")\nproject_users_member = sonarqube.GroupMember(\"projectUsersMember\", login_name=user.login_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = new Sonarqube.User(\"user\", new()\n    {\n        LoginName = \"terraform-test\",\n        Password = \"secret-sauce37!\",\n    });\n\n    var projectUsers = new Sonarqube.Group(\"projectUsers\", new()\n    {\n        Description = \"This is a group\",\n    });\n\n    var projectUsersMember = new Sonarqube.GroupMember(\"projectUsersMember\", new()\n    {\n        LoginName = user.LoginName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser, err := sonarqube.NewUser(ctx, \"user\", \u0026sonarqube.UserArgs{\n\t\t\tLoginName: pulumi.String(\"terraform-test\"),\n\t\t\tPassword:  pulumi.String(\"secret-sauce37!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewGroup(ctx, \"projectUsers\", \u0026sonarqube.GroupArgs{\n\t\t\tDescription: pulumi.String(\"This is a group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewGroupMember(ctx, \"projectUsersMember\", \u0026sonarqube.GroupMemberArgs{\n\t\t\tLoginName: user.LoginName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.User;\nimport com.pulumi.sonarqube.UserArgs;\nimport com.pulumi.sonarqube.Group;\nimport com.pulumi.sonarqube.GroupArgs;\nimport com.pulumi.sonarqube.GroupMember;\nimport com.pulumi.sonarqube.GroupMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .loginName(\"terraform-test\")\n            .password(\"secret-sauce37!\")\n            .build());\n\n        var projectUsers = new Group(\"projectUsers\", GroupArgs.builder()        \n            .description(\"This is a group\")\n            .build());\n\n        var projectUsersMember = new GroupMember(\"projectUsersMember\", GroupMemberArgs.builder()        \n            .loginName(user.loginName())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: sonarqube:User\n    properties:\n      loginName: terraform-test\n      password: secret-sauce37!\n  projectUsers:\n    type: sonarqube:Group\n    properties:\n      description: This is a group\n  projectUsersMember:\n    type: sonarqube:GroupMember\n    properties:\n      loginName: ${user.loginName}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGroup Members can be imported using their ID (`\u003cname\u003e[\u003clogin_name\u003e]`):\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/groupMember:GroupMember member group[user]\n```\n\n",
            "properties": {
                "loginName": {
                    "type": "string",
                    "description": "The `login_name` of the User to add as a member. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Group to add a member to. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "loginName",
                "name"
            ],
            "inputProperties": {
                "loginName": {
                    "type": "string",
                    "description": "The `login_name` of the User to add as a member. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Group to add a member to. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loginName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMember resources.\n",
                "properties": {
                    "loginName": {
                        "type": "string",
                        "description": "The `login_name` of the User to add as a member. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Group to add a member to. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/newCodePeriods:NewCodePeriods": {
            "description": "## # sonarqube.NewCodePeriods\n\nProvides a Sonarqube New Code Periods resource. This can be used to manage Sonarqube New Code Periods.\n\n## Example: Set the global new code period to a number of days\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst codePeriod = new sonarqube.NewCodePeriods(\"codePeriod\", {\n    type: \"NUMBER_OF_DAYS\",\n    value: \"7\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ncode_period = sonarqube.NewCodePeriods(\"codePeriod\",\n    type=\"NUMBER_OF_DAYS\",\n    value=\"7\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var codePeriod = new Sonarqube.NewCodePeriods(\"codePeriod\", new()\n    {\n        Type = \"NUMBER_OF_DAYS\",\n        Value = \"7\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewNewCodePeriods(ctx, \"codePeriod\", \u0026sonarqube.NewCodePeriodsArgs{\n\t\t\tType:  pulumi.String(\"NUMBER_OF_DAYS\"),\n\t\t\tValue: pulumi.String(\"7\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.NewCodePeriods;\nimport com.pulumi.sonarqube.NewCodePeriodsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var codePeriod = new NewCodePeriods(\"codePeriod\", NewCodePeriodsArgs.builder()        \n            .type(\"NUMBER_OF_DAYS\")\n            .value(\"7\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  codePeriod:\n    type: sonarqube:NewCodePeriods\n    properties:\n      type: NUMBER_OF_DAYS\n      value: '7'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NewCodePeriods resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/permissionTemplate:PermissionTemplate": {
            "description": "## # sonarqube.PermissionTemplate\n\nProvides a Sonarqube Permission template resource. This can be used to create and manage Sonarqube Permission\ntemplates.\n\n## Example: create a template\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst template = new sonarqube.PermissionTemplate(\"template\", {\n    description: \"These are internal projects\",\n    projectKeyPattern: \"internal.*\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ntemplate = sonarqube.PermissionTemplate(\"template\",\n    description=\"These are internal projects\",\n    project_key_pattern=\"internal.*\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var template = new Sonarqube.PermissionTemplate(\"template\", new()\n    {\n        Description = \"These are internal projects\",\n        ProjectKeyPattern = \"internal.*\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewPermissionTemplate(ctx, \"template\", \u0026sonarqube.PermissionTemplateArgs{\n\t\t\tDescription:       pulumi.String(\"These are internal projects\"),\n\t\t\tProjectKeyPattern: pulumi.String(\"internal.*\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.PermissionTemplate;\nimport com.pulumi.sonarqube.PermissionTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var template = new PermissionTemplate(\"template\", PermissionTemplateArgs.builder()        \n            .description(\"These are internal projects\")\n            .projectKeyPattern(\"internal.*\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  template:\n    type: sonarqube:PermissionTemplate\n    properties:\n      description: These are internal projects\n      projectKeyPattern: internal.*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTemplates can be imported using their ID\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/permissionTemplate:PermissionTemplate template ABC_defghij\n```\n\n",
            "properties": {
                "default": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectKeyPattern": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "default": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "projectKeyPattern": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PermissionTemplate resources.\n",
                "properties": {
                    "default": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "projectKeyPattern": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/permissions:Permissions": {
            "description": "## # sonarqube.Permissions\n\nProvides a Sonarqube Permissions resource. This can be used to manage global and project permissions.\n\n## Example: Set global admin permissions for a group called \"my-admins\"\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst myGlobalAdmins = new sonarqube.Permissions(\"myGlobalAdmins\", {\n    groupName: \"my-admins\",\n    permissions: [\"admin\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmy_global_admins = sonarqube.Permissions(\"myGlobalAdmins\",\n    group_name=\"my-admins\",\n    permissions=[\"admin\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGlobalAdmins = new Sonarqube.Permissions(\"myGlobalAdmins\", new()\n    {\n        GroupName = \"my-admins\",\n        PermissionList = new[]\n        {\n            \"admin\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewPermissions(ctx, \"myGlobalAdmins\", \u0026sonarqube.PermissionsArgs{\n\t\t\tGroupName: pulumi.String(\"my-admins\"),\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Permissions;\nimport com.pulumi.sonarqube.PermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myGlobalAdmins = new Permissions(\"myGlobalAdmins\", PermissionsArgs.builder()        \n            .groupName(\"my-admins\")\n            .permissions(\"admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myGlobalAdmins:\n    type: sonarqube:Permissions\n    properties:\n      groupName: my-admins\n      permissions:\n        - admin\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: Set project admin permissions for a group called \"my-project-admins\"\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst myProjectAdmins = new sonarqube.Permissions(\"myProjectAdmins\", {\n    groupName: \"my-project-admins\",\n    permissions: [\"admin\"],\n    projectKey: \"my-project\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmy_project_admins = sonarqube.Permissions(\"myProjectAdmins\",\n    group_name=\"my-project-admins\",\n    permissions=[\"admin\"],\n    project_key=\"my-project\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProjectAdmins = new Sonarqube.Permissions(\"myProjectAdmins\", new()\n    {\n        GroupName = \"my-project-admins\",\n        PermissionList = new[]\n        {\n            \"admin\",\n        },\n        ProjectKey = \"my-project\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewPermissions(ctx, \"myProjectAdmins\", \u0026sonarqube.PermissionsArgs{\n\t\t\tGroupName: pulumi.String(\"my-project-admins\"),\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"admin\"),\n\t\t\t},\n\t\t\tProjectKey: pulumi.String(\"my-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Permissions;\nimport com.pulumi.sonarqube.PermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myProjectAdmins = new Permissions(\"myProjectAdmins\", PermissionsArgs.builder()        \n            .groupName(\"my-project-admins\")\n            .permissions(\"admin\")\n            .projectKey(\"my-project\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myProjectAdmins:\n    type: sonarqube:Permissions\n    properties:\n      groupName: my-project-admins\n      permissions:\n        - admin\n      projectKey: my-project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: Set project admin permissions for a group called \"my-project-admins on a permission template\"\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst internalAdmins = new sonarqube.Permissions(\"internalAdmins\", {\n    groupName: \"my-internal-admins\",\n    templateId: sonarqube_permission_template.template.id,\n    permissions: [\"admin\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ninternal_admins = sonarqube.Permissions(\"internalAdmins\",\n    group_name=\"my-internal-admins\",\n    template_id=sonarqube_permission_template[\"template\"][\"id\"],\n    permissions=[\"admin\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var internalAdmins = new Sonarqube.Permissions(\"internalAdmins\", new()\n    {\n        GroupName = \"my-internal-admins\",\n        TemplateId = sonarqube_permission_template.Template.Id,\n        PermissionList = new[]\n        {\n            \"admin\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewPermissions(ctx, \"internalAdmins\", \u0026sonarqube.PermissionsArgs{\n\t\t\tGroupName:  pulumi.String(\"my-internal-admins\"),\n\t\t\tTemplateId: pulumi.Any(sonarqube_permission_template.Template.Id),\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Permissions;\nimport com.pulumi.sonarqube.PermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var internalAdmins = new Permissions(\"internalAdmins\", PermissionsArgs.builder()        \n            .groupName(\"my-internal-admins\")\n            .templateId(sonarqube_permission_template.template().id())\n            .permissions(\"admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  internalAdmins:\n    type: sonarqube:Permissions\n    properties:\n      groupName: my-internal-admins\n      templateId: ${sonarqube_permission_template.template.id}\n      permissions:\n        - admin\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: Set codeviewer \u0026 user permissions on project level for a user called \"johndoe\"\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst johnProjectRead = new sonarqube.Permissions(\"johnProjectRead\", {\n    loginName: \"johndoe\",\n    permissions: [\n        \"codeviewer\",\n        \"user\",\n    ],\n    projectKey: \"my-project\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\njohn_project_read = sonarqube.Permissions(\"johnProjectRead\",\n    login_name=\"johndoe\",\n    permissions=[\n        \"codeviewer\",\n        \"user\",\n    ],\n    project_key=\"my-project\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnProjectRead = new Sonarqube.Permissions(\"johnProjectRead\", new()\n    {\n        LoginName = \"johndoe\",\n        PermissionList = new[]\n        {\n            \"codeviewer\",\n            \"user\",\n        },\n        ProjectKey = \"my-project\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewPermissions(ctx, \"johnProjectRead\", \u0026sonarqube.PermissionsArgs{\n\t\t\tLoginName: pulumi.String(\"johndoe\"),\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"codeviewer\"),\n\t\t\t\tpulumi.String(\"user\"),\n\t\t\t},\n\t\t\tProjectKey: pulumi.String(\"my-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Permissions;\nimport com.pulumi.sonarqube.PermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var johnProjectRead = new Permissions(\"johnProjectRead\", PermissionsArgs.builder()        \n            .loginName(\"johndoe\")\n            .permissions(            \n                \"codeviewer\",\n                \"user\")\n            .projectKey(\"my-project\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  johnProjectRead:\n    type: sonarqube:Permissions\n    properties:\n      loginName: johndoe\n      permissions:\n        - codeviewer\n        - user\n      projectKey: my-project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImporting is not supported for the `sonarqube_permissions` resource.\n\n",
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "csharp": {
                            "name": "PermissionList"
                        }
                    }
                },
                "projectKey": {
                    "type": "string"
                },
                "templateId": {
                    "type": "string"
                },
                "templateName": {
                    "type": "string"
                }
            },
            "required": [
                "permissions"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "loginName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "csharp": {
                            "name": "PermissionList"
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "projectKey": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "templateId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "templateName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Permissions resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "loginName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "language": {
                            "csharp": {
                                "name": "PermissionList"
                            }
                        },
                        "willReplaceOnChanges": true
                    },
                    "projectKey": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "templateId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "templateName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/plugin:Plugin": {
            "description": "## # sonarqube.Plugin\n\nProvides a Sonarqube Plugin resource. This can be used to create and manage Sonarqube Plugins.\n\n## Example: create a project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = new sonarqube.Plugin(\"main\", {key: \"cloudformation\"});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.Plugin(\"main\", key=\"cloudformation\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sonarqube.Plugin(\"main\", new()\n    {\n        Key = \"cloudformation\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewPlugin(ctx, \"main\", \u0026sonarqube.PluginArgs{\n\t\t\tKey: pulumi.String(\"cloudformation\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Plugin;\nimport com.pulumi.sonarqube.PluginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Plugin(\"main\", PluginArgs.builder()        \n            .key(\"cloudformation\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sonarqube:Plugin\n    properties:\n      key: cloudformation\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import \n\nProjects can be imported using their plugin key\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Notes\n\nAfter installing or uninstalling a plugin, the sonarqube server needs to be restarted.\n",
            "properties": {
                "key": {
                    "type": "string"
                }
            },
            "required": [
                "key"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Plugin resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/portfolio:Portfolio": {
            "description": "## # sonarqube.Portfolio\n\nProvides a Sonarqube Portfolio resource. This can be used to create and manage Sonarqube Portfolio. Note that the SonarQube API for Portfolios is called ``views`` \n\n## Example: create a portfolio\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = new sonarqube.Portfolio(\"main\", {\n    description: \"portfolio-description\",\n    key: \"portfolio-key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.Portfolio(\"main\",\n    description=\"portfolio-description\",\n    key=\"portfolio-key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sonarqube.Portfolio(\"main\", new()\n    {\n        Description = \"portfolio-description\",\n        Key = \"portfolio-key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewPortfolio(ctx, \"main\", \u0026sonarqube.PortfolioArgs{\n\t\t\tDescription: pulumi.String(\"portfolio-description\"),\n\t\t\tKey:         pulumi.String(\"portfolio-key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Portfolio;\nimport com.pulumi.sonarqube.PortfolioArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Portfolio(\"main\", PortfolioArgs.builder()        \n            .description(\"portfolio-description\")\n            .key(\"portfolio-key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sonarqube:Portfolio\n    properties:\n      description: portfolio-description\n      key: portfolio-key\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import \n\nPortfolios can be imported using their portfolio key\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Which branch to analyze. If nothing, or '' is specified, the main branch is used.\n"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "regexp": {
                    "type": "string"
                },
                "selectedProjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sonarqube:index/PortfolioSelectedProject:PortfolioSelectedProject"
                    },
                    "description": "A set of projects to add to the portfolio.\n"
                },
                "selectionMode": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "visibility": {
                    "type": "string"
                }
            },
            "required": [
                "description",
                "key",
                "name",
                "qualifier"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "Which branch to analyze. If nothing, or '' is specified, the main branch is used.\n"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string"
                },
                "regexp": {
                    "type": "string"
                },
                "selectedProjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sonarqube:index/PortfolioSelectedProject:PortfolioSelectedProject"
                    },
                    "description": "A set of projects to add to the portfolio.\n"
                },
                "selectionMode": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "visibility": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Portfolio resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Which branch to analyze. If nothing, or '' is specified, the main branch is used.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "qualifier": {
                        "type": "string"
                    },
                    "regexp": {
                        "type": "string"
                    },
                    "selectedProjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sonarqube:index/PortfolioSelectedProject:PortfolioSelectedProject"
                        },
                        "description": "A set of projects to add to the portfolio.\n"
                    },
                    "selectionMode": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "visibility": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/project:Project": {
            "description": "## # sonarqube.Project\n\nProvides a Sonarqube Project resource. This can be used to create and manage Sonarqube Project.\n\n## Example: create a project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = new sonarqube.Project(\"main\", {\n    project: \"my_project\",\n    visibility: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.Project(\"main\",\n    project=\"my_project\",\n    visibility=\"public\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sonarqube.Project(\"main\", new()\n    {\n        ProjectName = \"my_project\",\n        Visibility = \"public\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewProject(ctx, \"main\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Project(\"main\", ProjectArgs.builder()        \n            .project(\"my_project\")\n            .visibility(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sonarqube:Project\n    properties:\n      project: my_project\n      visibility: public\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: a project with associated settings\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = new sonarqube.Project(\"main\", {\n    project: \"my_project\",\n    settings: [{\n        key: \"sonar.demo\",\n        value: \"sonarqube@example.org\",\n    }],\n    visibility: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.Project(\"main\",\n    project=\"my_project\",\n    settings=[sonarqube.ProjectSettingArgs(\n        key=\"sonar.demo\",\n        value=\"sonarqube@example.org\",\n    )],\n    visibility=\"public\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sonarqube.Project(\"main\", new()\n    {\n        ProjectName = \"my_project\",\n        Settings = new[]\n        {\n            new Sonarqube.Inputs.ProjectSettingArgs\n            {\n                Key = \"sonar.demo\",\n                Value = \"sonarqube@example.org\",\n            },\n        },\n        Visibility = \"public\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewProject(ctx, \"main\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject: pulumi.String(\"my_project\"),\n\t\t\tSettings: sonarqube.ProjectSettingArray{\n\t\t\t\t\u0026sonarqube.ProjectSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"sonar.demo\"),\n\t\t\t\t\tValue: pulumi.String(\"sonarqube@example.org\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.inputs.ProjectSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Project(\"main\", ProjectArgs.builder()        \n            .project(\"my_project\")\n            .settings(ProjectSettingArgs.builder()\n                .key(\"sonar.demo\")\n                .value(\"sonarqube@example.org\")\n                .build())\n            .visibility(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sonarqube:Project\n    properties:\n      project: my_project\n      settings:\n        - key: sonar.demo\n          value: sonarqube@example.org\n      visibility: public\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import \n\nProjects can be imported using their project key\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "ProjectName"
                        }
                    }
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sonarqube:index/ProjectSetting:ProjectSetting"
                    },
                    "description": "A list of settings associated to the project\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "visibility": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "project"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "ProjectName"
                        }
                    }
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sonarqube:index/ProjectSetting:ProjectSetting"
                    },
                    "description": "A list of settings associated to the project\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "visibility": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "language": {
                            "csharp": {
                                "name": "ProjectName"
                            }
                        }
                    },
                    "settings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sonarqube:index/ProjectSetting:ProjectSetting"
                        },
                        "description": "A list of settings associated to the project\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "visibility": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/projectMainBranch:ProjectMainBranch": {
            "description": "## # sonarqube.ProjectMainBranch\n\nProvides a Sonarqube Project main branch resource. This can be used to create and manage a Sonarqube Projects main branch.\n\n## Example: Change the name of the main branch\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = new sonarqube.Project(\"main\", {\n    project: \"my_project\",\n    visibility: \"public\",\n});\nconst mybranch = new sonarqube.ProjectMainBranch(\"mybranch\", {project: \"my_project\"});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.Project(\"main\",\n    project=\"my_project\",\n    visibility=\"public\")\nmybranch = sonarqube.ProjectMainBranch(\"mybranch\", project=\"my_project\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sonarqube.Project(\"main\", new()\n    {\n        ProjectName = \"my_project\",\n        Visibility = \"public\",\n    });\n\n    var mybranch = new Sonarqube.ProjectMainBranch(\"mybranch\", new()\n    {\n        Project = \"my_project\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewProject(ctx, \"main\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewProjectMainBranch(ctx, \"mybranch\", \u0026sonarqube.ProjectMainBranchArgs{\n\t\t\tProject: pulumi.String(\"my_project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.ProjectMainBranch;\nimport com.pulumi.sonarqube.ProjectMainBranchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Project(\"main\", ProjectArgs.builder()        \n            .project(\"my_project\")\n            .visibility(\"public\")\n            .build());\n\n        var mybranch = new ProjectMainBranch(\"mybranch\", ProjectMainBranchArgs.builder()        \n            .project(\"my_project\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sonarqube:Project\n    properties:\n      project: my_project\n      visibility: public\n  mybranch:\n    type: sonarqube:ProjectMainBranch\n    properties:\n      project: my_project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nMain branch can be imported using their ID\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/projectMainBranch:ProjectMainBranch mybranch project/name\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "project"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMainBranch resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/qualitygate:Qualitygate": {
            "description": "## # sonarqube.Qualitygate\n\nProvides a Sonarqube Quality Gate resource. This can be used to create and manage Sonarqube Quality Gates and their Conditions.\n\n## Example: create a quality gate\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = new sonarqube.Qualitygate(\"main\", {\n    conditions: [\n        {\n            metric: \"new_coverage\",\n            op: \"LT\",\n            threshold: \"50\",\n        },\n        {\n            metric: \"vulnerabilities\",\n            op: \"GT\",\n            threshold: \"10\",\n        },\n    ],\n    isDefault: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.Qualitygate(\"main\",\n    conditions=[\n        sonarqube.QualitygateConditionArgs(\n            metric=\"new_coverage\",\n            op=\"LT\",\n            threshold=\"50\",\n        ),\n        sonarqube.QualitygateConditionArgs(\n            metric=\"vulnerabilities\",\n            op=\"GT\",\n            threshold=\"10\",\n        ),\n    ],\n    is_default=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sonarqube.Qualitygate(\"main\", new()\n    {\n        Conditions = new[]\n        {\n            new Sonarqube.Inputs.QualitygateConditionArgs\n            {\n                Metric = \"new_coverage\",\n                Op = \"LT\",\n                Threshold = \"50\",\n            },\n            new Sonarqube.Inputs.QualitygateConditionArgs\n            {\n                Metric = \"vulnerabilities\",\n                Op = \"GT\",\n                Threshold = \"10\",\n            },\n        },\n        IsDefault = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewQualitygate(ctx, \"main\", \u0026sonarqube.QualitygateArgs{\n\t\t\tConditions: sonarqube.QualitygateConditionArray{\n\t\t\t\t\u0026sonarqube.QualitygateConditionArgs{\n\t\t\t\t\tMetric:    pulumi.String(\"new_coverage\"),\n\t\t\t\t\tOp:        pulumi.String(\"LT\"),\n\t\t\t\t\tThreshold: pulumi.String(\"50\"),\n\t\t\t\t},\n\t\t\t\t\u0026sonarqube.QualitygateConditionArgs{\n\t\t\t\t\tMetric:    pulumi.String(\"vulnerabilities\"),\n\t\t\t\t\tOp:        pulumi.String(\"GT\"),\n\t\t\t\t\tThreshold: pulumi.String(\"10\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsDefault: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Qualitygate;\nimport com.pulumi.sonarqube.QualitygateArgs;\nimport com.pulumi.sonarqube.inputs.QualitygateConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Qualitygate(\"main\", QualitygateArgs.builder()        \n            .conditions(            \n                QualitygateConditionArgs.builder()\n                    .metric(\"new_coverage\")\n                    .op(\"LT\")\n                    .threshold(\"50\")\n                    .build(),\n                QualitygateConditionArgs.builder()\n                    .metric(\"vulnerabilities\")\n                    .op(\"GT\")\n                    .threshold(\"10\")\n                    .build())\n            .isDefault(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sonarqube:Qualitygate\n    properties:\n      conditions:\n        - metric: new_coverage\n          op: LT\n          threshold: '50'\n        - metric: vulnerabilities\n          op: GT\n          threshold: '10'\n      isDefault: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nQuality Gates can be imported using its name\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/qualitygate:Qualitygate main my-cool-gate\n```\n\n",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sonarqube:index/QualitygateCondition:QualitygateCondition"
                    },
                    "description": "A list of conditions that the gate uses\n"
                },
                "copyFrom": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "When set to true this Quality Gate is set as default\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sonarqube:index/QualitygateCondition:QualitygateCondition"
                    },
                    "description": "A list of conditions that the gate uses\n"
                },
                "copyFrom": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "When set to true this Quality Gate is set as default\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Qualitygate resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sonarqube:index/QualitygateCondition:QualitygateCondition"
                        },
                        "description": "A list of conditions that the gate uses\n"
                    },
                    "copyFrom": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "When set to true this Quality Gate is set as default\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/qualitygateProjectAssociation:QualitygateProjectAssociation": {
            "description": "## # sonarqube.QualitygateProjectAssociation\n\nProvides a Sonarqube Quality Gate Project association resource. This can be used to associate a Quality Gate to a Project\n\n## Example: create a quality gate project association\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst mainQualitygate = new sonarqube.Qualitygate(\"mainQualitygate\", {conditions: [{\n    metric: \"new_coverage\",\n    op: \"LT\",\n    threshold: \"30\",\n}]});\nconst mainProject = new sonarqube.Project(\"mainProject\", {\n    project: \"my_project\",\n    visibility: \"public\",\n});\nconst mainQualitygateProjectAssociation = new sonarqube.QualitygateProjectAssociation(\"mainQualitygateProjectAssociation\", {\n    gatename: mainQualitygate.id,\n    projectkey: mainProject.project,\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain_qualitygate = sonarqube.Qualitygate(\"mainQualitygate\", conditions=[sonarqube.QualitygateConditionArgs(\n    metric=\"new_coverage\",\n    op=\"LT\",\n    threshold=\"30\",\n)])\nmain_project = sonarqube.Project(\"mainProject\",\n    project=\"my_project\",\n    visibility=\"public\")\nmain_qualitygate_project_association = sonarqube.QualitygateProjectAssociation(\"mainQualitygateProjectAssociation\",\n    gatename=main_qualitygate.id,\n    projectkey=main_project.project)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainQualitygate = new Sonarqube.Qualitygate(\"mainQualitygate\", new()\n    {\n        Conditions = new[]\n        {\n            new Sonarqube.Inputs.QualitygateConditionArgs\n            {\n                Metric = \"new_coverage\",\n                Op = \"LT\",\n                Threshold = \"30\",\n            },\n        },\n    });\n\n    var mainProject = new Sonarqube.Project(\"mainProject\", new()\n    {\n        ProjectName = \"my_project\",\n        Visibility = \"public\",\n    });\n\n    var mainQualitygateProjectAssociation = new Sonarqube.QualitygateProjectAssociation(\"mainQualitygateProjectAssociation\", new()\n    {\n        Gatename = mainQualitygate.Id,\n        Projectkey = mainProject.ProjectName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainQualitygate, err := sonarqube.NewQualitygate(ctx, \"mainQualitygate\", \u0026sonarqube.QualitygateArgs{\n\t\t\tConditions: sonarqube.QualitygateConditionArray{\n\t\t\t\t\u0026sonarqube.QualitygateConditionArgs{\n\t\t\t\t\tMetric:    pulumi.String(\"new_coverage\"),\n\t\t\t\t\tOp:        pulumi.String(\"LT\"),\n\t\t\t\t\tThreshold: pulumi.String(\"30\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainProject, err := sonarqube.NewProject(ctx, \"mainProject\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewQualitygateProjectAssociation(ctx, \"mainQualitygateProjectAssociation\", \u0026sonarqube.QualitygateProjectAssociationArgs{\n\t\t\tGatename:   mainQualitygate.ID(),\n\t\t\tProjectkey: mainProject.Project,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Qualitygate;\nimport com.pulumi.sonarqube.QualitygateArgs;\nimport com.pulumi.sonarqube.inputs.QualitygateConditionArgs;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.QualitygateProjectAssociation;\nimport com.pulumi.sonarqube.QualitygateProjectAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainQualitygate = new Qualitygate(\"mainQualitygate\", QualitygateArgs.builder()        \n            .conditions(QualitygateConditionArgs.builder()\n                .metric(\"new_coverage\")\n                .op(\"LT\")\n                .threshold(\"30\")\n                .build())\n            .build());\n\n        var mainProject = new Project(\"mainProject\", ProjectArgs.builder()        \n            .project(\"my_project\")\n            .visibility(\"public\")\n            .build());\n\n        var mainQualitygateProjectAssociation = new QualitygateProjectAssociation(\"mainQualitygateProjectAssociation\", QualitygateProjectAssociationArgs.builder()        \n            .gatename(mainQualitygate.id())\n            .projectkey(mainProject.project())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainQualitygate:\n    type: sonarqube:Qualitygate\n    properties:\n      conditions:\n        - metric: new_coverage\n          op: LT\n          threshold: '30'\n  mainProject:\n    type: sonarqube:Project\n    properties:\n      project: my_project\n      visibility: public\n  mainQualitygateProjectAssociation:\n    type: sonarqube:QualitygateProjectAssociation\n    properties:\n      gatename: ${mainQualitygate.id}\n      projectkey: ${mainProject.project}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "properties": {
                "gateid": {
                    "type": "string"
                },
                "gatename": {
                    "type": "string"
                },
                "projectkey": {
                    "type": "string"
                }
            },
            "required": [
                "projectkey"
            ],
            "inputProperties": {
                "gateid": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "gatename": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "projectkey": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectkey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualitygateProjectAssociation resources.\n",
                "properties": {
                    "gateid": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "gatename": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "projectkey": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation": {
            "description": "## # sonarqube.QualitygateUsergroupAssociation\n\nProvides a Sonarqube Quality Gate Usergroup association resource. This can be used to associate a Quality Gate to an User or to a Group.\nThe feature is available on SonarQube 9.2 or newer.\n\n## Example: create a quality gate group association\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst mainQualitygate = new sonarqube.Qualitygate(\"mainQualitygate\", {conditions: [{\n    metric: \"new_coverage\",\n    op: \"LT\",\n    threshold: \"30\",\n}]});\nconst qaTeam = new sonarqube.Group(\"qaTeam\", {description: \"Quality Assurence Team\"});\nconst mainQualitygateUsergroupAssociation = new sonarqube.QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\", {\n    gatename: mainQualitygate.id,\n    groupName: qaTeam.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain_qualitygate = sonarqube.Qualitygate(\"mainQualitygate\", conditions=[sonarqube.QualitygateConditionArgs(\n    metric=\"new_coverage\",\n    op=\"LT\",\n    threshold=\"30\",\n)])\nqa_team = sonarqube.Group(\"qaTeam\", description=\"Quality Assurence Team\")\nmain_qualitygate_usergroup_association = sonarqube.QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\",\n    gatename=main_qualitygate.id,\n    group_name=qa_team.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainQualitygate = new Sonarqube.Qualitygate(\"mainQualitygate\", new()\n    {\n        Conditions = new[]\n        {\n            new Sonarqube.Inputs.QualitygateConditionArgs\n            {\n                Metric = \"new_coverage\",\n                Op = \"LT\",\n                Threshold = \"30\",\n            },\n        },\n    });\n\n    var qaTeam = new Sonarqube.Group(\"qaTeam\", new()\n    {\n        Description = \"Quality Assurence Team\",\n    });\n\n    var mainQualitygateUsergroupAssociation = new Sonarqube.QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\", new()\n    {\n        Gatename = mainQualitygate.Id,\n        GroupName = qaTeam.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainQualitygate, err := sonarqube.NewQualitygate(ctx, \"mainQualitygate\", \u0026sonarqube.QualitygateArgs{\n\t\t\tConditions: sonarqube.QualitygateConditionArray{\n\t\t\t\t\u0026sonarqube.QualitygateConditionArgs{\n\t\t\t\t\tMetric:    pulumi.String(\"new_coverage\"),\n\t\t\t\t\tOp:        pulumi.String(\"LT\"),\n\t\t\t\t\tThreshold: pulumi.String(\"30\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqaTeam, err := sonarqube.NewGroup(ctx, \"qaTeam\", \u0026sonarqube.GroupArgs{\n\t\t\tDescription: pulumi.String(\"Quality Assurence Team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewQualitygateUsergroupAssociation(ctx, \"mainQualitygateUsergroupAssociation\", \u0026sonarqube.QualitygateUsergroupAssociationArgs{\n\t\t\tGatename:  mainQualitygate.ID(),\n\t\t\tGroupName: qaTeam.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Qualitygate;\nimport com.pulumi.sonarqube.QualitygateArgs;\nimport com.pulumi.sonarqube.inputs.QualitygateConditionArgs;\nimport com.pulumi.sonarqube.Group;\nimport com.pulumi.sonarqube.GroupArgs;\nimport com.pulumi.sonarqube.QualitygateUsergroupAssociation;\nimport com.pulumi.sonarqube.QualitygateUsergroupAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainQualitygate = new Qualitygate(\"mainQualitygate\", QualitygateArgs.builder()        \n            .conditions(QualitygateConditionArgs.builder()\n                .metric(\"new_coverage\")\n                .op(\"LT\")\n                .threshold(\"30\")\n                .build())\n            .build());\n\n        var qaTeam = new Group(\"qaTeam\", GroupArgs.builder()        \n            .description(\"Quality Assurence Team\")\n            .build());\n\n        var mainQualitygateUsergroupAssociation = new QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\", QualitygateUsergroupAssociationArgs.builder()        \n            .gatename(mainQualitygate.id())\n            .groupName(qaTeam.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainQualitygate:\n    type: sonarqube:Qualitygate\n    properties:\n      conditions:\n        - metric: new_coverage\n          op: LT\n          threshold: '30'\n  qaTeam:\n    type: sonarqube:Group\n    properties:\n      description: Quality Assurence Team\n  mainQualitygateUsergroupAssociation:\n    type: sonarqube:QualitygateUsergroupAssociation\n    properties:\n      gatename: ${mainQualitygate.id}\n      groupName: ${qaTeam.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: create a quality gate user association\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst mainQualitygate = new sonarqube.Qualitygate(\"mainQualitygate\", {conditions: [{\n    metric: \"new_coverage\",\n    op: \"LT\",\n    threshold: \"30\",\n}]});\nconst qaUser = new sonarqube.User(\"qaUser\", {\n    loginName: \"qa-user\",\n    password: \"secret-sauce37!\",\n});\nconst mainQualitygateUsergroupAssociation = new sonarqube.QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\", {\n    gatename: mainQualitygate.id,\n    loginName: qaUser.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain_qualitygate = sonarqube.Qualitygate(\"mainQualitygate\", conditions=[sonarqube.QualitygateConditionArgs(\n    metric=\"new_coverage\",\n    op=\"LT\",\n    threshold=\"30\",\n)])\nqa_user = sonarqube.User(\"qaUser\",\n    login_name=\"qa-user\",\n    password=\"secret-sauce37!\")\nmain_qualitygate_usergroup_association = sonarqube.QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\",\n    gatename=main_qualitygate.id,\n    login_name=qa_user.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainQualitygate = new Sonarqube.Qualitygate(\"mainQualitygate\", new()\n    {\n        Conditions = new[]\n        {\n            new Sonarqube.Inputs.QualitygateConditionArgs\n            {\n                Metric = \"new_coverage\",\n                Op = \"LT\",\n                Threshold = \"30\",\n            },\n        },\n    });\n\n    var qaUser = new Sonarqube.User(\"qaUser\", new()\n    {\n        LoginName = \"qa-user\",\n        Password = \"secret-sauce37!\",\n    });\n\n    var mainQualitygateUsergroupAssociation = new Sonarqube.QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\", new()\n    {\n        Gatename = mainQualitygate.Id,\n        LoginName = qaUser.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainQualitygate, err := sonarqube.NewQualitygate(ctx, \"mainQualitygate\", \u0026sonarqube.QualitygateArgs{\n\t\t\tConditions: sonarqube.QualitygateConditionArray{\n\t\t\t\t\u0026sonarqube.QualitygateConditionArgs{\n\t\t\t\t\tMetric:    pulumi.String(\"new_coverage\"),\n\t\t\t\t\tOp:        pulumi.String(\"LT\"),\n\t\t\t\t\tThreshold: pulumi.String(\"30\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqaUser, err := sonarqube.NewUser(ctx, \"qaUser\", \u0026sonarqube.UserArgs{\n\t\t\tLoginName: pulumi.String(\"qa-user\"),\n\t\t\tPassword:  pulumi.String(\"secret-sauce37!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewQualitygateUsergroupAssociation(ctx, \"mainQualitygateUsergroupAssociation\", \u0026sonarqube.QualitygateUsergroupAssociationArgs{\n\t\t\tGatename:  mainQualitygate.ID(),\n\t\t\tLoginName: qaUser.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Qualitygate;\nimport com.pulumi.sonarqube.QualitygateArgs;\nimport com.pulumi.sonarqube.inputs.QualitygateConditionArgs;\nimport com.pulumi.sonarqube.User;\nimport com.pulumi.sonarqube.UserArgs;\nimport com.pulumi.sonarqube.QualitygateUsergroupAssociation;\nimport com.pulumi.sonarqube.QualitygateUsergroupAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainQualitygate = new Qualitygate(\"mainQualitygate\", QualitygateArgs.builder()        \n            .conditions(QualitygateConditionArgs.builder()\n                .metric(\"new_coverage\")\n                .op(\"LT\")\n                .threshold(\"30\")\n                .build())\n            .build());\n\n        var qaUser = new User(\"qaUser\", UserArgs.builder()        \n            .loginName(\"qa-user\")\n            .password(\"secret-sauce37!\")\n            .build());\n\n        var mainQualitygateUsergroupAssociation = new QualitygateUsergroupAssociation(\"mainQualitygateUsergroupAssociation\", QualitygateUsergroupAssociationArgs.builder()        \n            .gatename(mainQualitygate.id())\n            .loginName(qaUser.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainQualitygate:\n    type: sonarqube:Qualitygate\n    properties:\n      conditions:\n        - metric: new_coverage\n          op: LT\n          threshold: '30'\n  qaUser:\n    type: sonarqube:User\n    properties:\n      loginName: qa-user\n      password: secret-sauce37!\n  mainQualitygateUsergroupAssociation:\n    type: sonarqube:QualitygateUsergroupAssociation\n    properties:\n      gatename: ${mainQualitygate.id}\n      loginName: ${qaUser.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport is not required because SonarQube overwrites existing associations.\n\n",
            "properties": {
                "gatename": {
                    "type": "string",
                    "description": "The name of the Quality Gate\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the Group to associate. Either `group_name` or `login_name` should be provided.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name of the User to associate. Either `group_name` or `login_name` should be provided.\n"
                }
            },
            "required": [
                "gatename"
            ],
            "inputProperties": {
                "gatename": {
                    "type": "string",
                    "description": "The name of the Quality Gate\n",
                    "willReplaceOnChanges": true
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the Group to associate. Either `group_name` or `login_name` should be provided.\n",
                    "willReplaceOnChanges": true
                },
                "loginName": {
                    "type": "string",
                    "description": "The name of the User to associate. Either `group_name` or `login_name` should be provided.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatename"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualitygateUsergroupAssociation resources.\n",
                "properties": {
                    "gatename": {
                        "type": "string",
                        "description": "The name of the Quality Gate\n",
                        "willReplaceOnChanges": true
                    },
                    "groupName": {
                        "type": "string",
                        "description": "The name of the Group to associate. Either `group_name` or `login_name` should be provided.\n",
                        "willReplaceOnChanges": true
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name of the User to associate. Either `group_name` or `login_name` should be provided.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/qualityprofile:Qualityprofile": {
            "description": "## # sonarqube.Qualityprofile\n\nProvides a Sonarqube Quality Profile resource. This can be used to create and manage Sonarqube Quality Profiles.\n\n## Example: create a quality profile\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = new sonarqube.Qualityprofile(\"main\", {\n    isDefault: false,\n    language: \"js\",\n    parent: \"sonar way\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.Qualityprofile(\"main\",\n    is_default=False,\n    language=\"js\",\n    parent=\"sonar way\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sonarqube.Qualityprofile(\"main\", new()\n    {\n        IsDefault = false,\n        Language = \"js\",\n        Parent = \"sonar way\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewQualityprofile(ctx, \"main\", \u0026sonarqube.QualityprofileArgs{\n\t\t\tIsDefault: pulumi.Bool(false),\n\t\t\tLanguage:  pulumi.String(\"js\"),\n\t\t\tParent:    pulumi.String(\"sonar way\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Qualityprofile;\nimport com.pulumi.sonarqube.QualityprofileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Qualityprofile(\"main\", QualityprofileArgs.builder()        \n            .isDefault(false)\n            .language(\"js\")\n            .parent(\"sonar way\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sonarqube:Qualityprofile\n    properties:\n      isDefault: false\n      language: js\n      parent: sonar way\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import \n\nQuality Profiles can be imported using their ID\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Is the default profile\n"
                },
                "key": {
                    "type": "string",
                    "description": "Quality profile key\n"
                },
                "language": {
                    "type": "string",
                    "description": "Quality profile language\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality profile name\n"
                },
                "parent": {
                    "type": "string"
                }
            },
            "required": [
                "key",
                "language",
                "name"
            ],
            "inputProperties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Is the default profile\n",
                    "willReplaceOnChanges": true
                },
                "language": {
                    "type": "string",
                    "description": "Quality profile language\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Quality profile name\n",
                    "willReplaceOnChanges": true
                },
                "parent": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "language"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Qualityprofile resources.\n",
                "properties": {
                    "isDefault": {
                        "type": "boolean",
                        "description": "Is the default profile\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "Quality profile key\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "Quality profile language\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Quality profile name\n",
                        "willReplaceOnChanges": true
                    },
                    "parent": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/qualityprofileActivateRule:QualityprofileActivateRule": {
            "description": "## # sonarqube.QualityprofileActivateRule\n\nProvides a Sonarqube Rules resource. This can be used to manage Sonarqube rules.\n\n## Example: activate a rule\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst allowedMavenDependencies = new sonarqube.Rule(\"allowedMavenDependencies\", {\n    customKey: \"Only_use_allowed_Maven_dependencies\",\n    markdownDescription: \"Description\",\n    params: \"FilePattern=**/pom.xml\",\n    severity: \"BLOCKER\",\n    status: \"READY\",\n    templateKey: \"xml:XPathCheck\",\n    type: \"VULNERABILITY\",\n});\nconst xml = new sonarqube.Qualityprofile(\"xml\", {\n    language: \"xml\",\n    isDefault: false,\n    parent: \"Sonar way\",\n});\nconst xmlRule = new sonarqube.QualityprofileActivateRule(\"xmlRule\", {\n    key: xml.key,\n    rule: allowedMavenDependencies.id,\n    severity: \"BLOCKER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nallowed_maven_dependencies = sonarqube.Rule(\"allowedMavenDependencies\",\n    custom_key=\"Only_use_allowed_Maven_dependencies\",\n    markdown_description=\"Description\",\n    params=\"FilePattern=**/pom.xml\",\n    severity=\"BLOCKER\",\n    status=\"READY\",\n    template_key=\"xml:XPathCheck\",\n    type=\"VULNERABILITY\")\nxml = sonarqube.Qualityprofile(\"xml\",\n    language=\"xml\",\n    is_default=False,\n    parent=\"Sonar way\")\nxml_rule = sonarqube.QualityprofileActivateRule(\"xmlRule\",\n    key=xml.key,\n    rule=allowed_maven_dependencies.id,\n    severity=\"BLOCKER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var allowedMavenDependencies = new Sonarqube.Rule(\"allowedMavenDependencies\", new()\n    {\n        CustomKey = \"Only_use_allowed_Maven_dependencies\",\n        MarkdownDescription = \"Description\",\n        Params = \"FilePattern=**/pom.xml\",\n        Severity = \"BLOCKER\",\n        Status = \"READY\",\n        TemplateKey = \"xml:XPathCheck\",\n        Type = \"VULNERABILITY\",\n    });\n\n    var xml = new Sonarqube.Qualityprofile(\"xml\", new()\n    {\n        Language = \"xml\",\n        IsDefault = false,\n        Parent = \"Sonar way\",\n    });\n\n    var xmlRule = new Sonarqube.QualityprofileActivateRule(\"xmlRule\", new()\n    {\n        Key = xml.Key,\n        Rule = allowedMavenDependencies.Id,\n        Severity = \"BLOCKER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tallowedMavenDependencies, err := sonarqube.NewRule(ctx, \"allowedMavenDependencies\", \u0026sonarqube.RuleArgs{\n\t\t\tCustomKey:           pulumi.String(\"Only_use_allowed_Maven_dependencies\"),\n\t\t\tMarkdownDescription: pulumi.String(\"Description\"),\n\t\t\tParams:              pulumi.String(\"FilePattern=**/pom.xml\"),\n\t\t\tSeverity:            pulumi.String(\"BLOCKER\"),\n\t\t\tStatus:              pulumi.String(\"READY\"),\n\t\t\tTemplateKey:         pulumi.String(\"xml:XPathCheck\"),\n\t\t\tType:                pulumi.String(\"VULNERABILITY\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\txml, err := sonarqube.NewQualityprofile(ctx, \"xml\", \u0026sonarqube.QualityprofileArgs{\n\t\t\tLanguage:  pulumi.String(\"xml\"),\n\t\t\tIsDefault: pulumi.Bool(false),\n\t\t\tParent:    pulumi.String(\"Sonar way\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewQualityprofileActivateRule(ctx, \"xmlRule\", \u0026sonarqube.QualityprofileActivateRuleArgs{\n\t\t\tKey:      xml.Key,\n\t\t\tRule:     allowedMavenDependencies.ID(),\n\t\t\tSeverity: pulumi.String(\"BLOCKER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Rule;\nimport com.pulumi.sonarqube.RuleArgs;\nimport com.pulumi.sonarqube.Qualityprofile;\nimport com.pulumi.sonarqube.QualityprofileArgs;\nimport com.pulumi.sonarqube.QualityprofileActivateRule;\nimport com.pulumi.sonarqube.QualityprofileActivateRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var allowedMavenDependencies = new Rule(\"allowedMavenDependencies\", RuleArgs.builder()        \n            .customKey(\"Only_use_allowed_Maven_dependencies\")\n            .markdownDescription(\"Description\")\n            .params(\"FilePattern=**/pom.xml\")\n            .severity(\"BLOCKER\")\n            .status(\"READY\")\n            .templateKey(\"xml:XPathCheck\")\n            .type(\"VULNERABILITY\")\n            .build());\n\n        var xml = new Qualityprofile(\"xml\", QualityprofileArgs.builder()        \n            .language(\"xml\")\n            .isDefault(\"false\")\n            .parent(\"Sonar way\")\n            .build());\n\n        var xmlRule = new QualityprofileActivateRule(\"xmlRule\", QualityprofileActivateRuleArgs.builder()        \n            .key(xml.key())\n            .rule(allowedMavenDependencies.id())\n            .severity(\"BLOCKER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  allowedMavenDependencies:\n    type: sonarqube:Rule\n    properties:\n      customKey: Only_use_allowed_Maven_dependencies\n      markdownDescription: Description\n      params: FilePattern=**/pom.xml\n      severity: BLOCKER\n      status: READY\n      templateKey: xml:XPathCheck\n      type: VULNERABILITY\n  xml:\n    type: sonarqube:Qualityprofile\n    properties:\n      language: xml\n      isDefault: 'false'\n      parent: Sonar way\n  xmlRule:\n    type: sonarqube:QualityprofileActivateRule\n    properties:\n      key: ${xml.key}\n      # .id also works\n      rule: ${allowedMavenDependencies.id}\n      severity: BLOCKER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Quality Profile key. Can be obtained through api/qualityprofiles/search\n"
                },
                "params": {
                    "type": "string",
                    "description": "Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)\n"
                },
                "reset": {
                    "type": "string",
                    "description": "Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.\n"
                },
                "rule": {
                    "type": "string",
                    "description": "Rule key\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Rule severity\n"
                }
            },
            "required": [
                "key",
                "rule"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Quality Profile key. Can be obtained through api/qualityprofiles/search\n",
                    "willReplaceOnChanges": true
                },
                "params": {
                    "type": "string",
                    "description": "Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)\n",
                    "willReplaceOnChanges": true
                },
                "reset": {
                    "type": "string",
                    "description": "Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.\n",
                    "willReplaceOnChanges": true
                },
                "rule": {
                    "type": "string",
                    "description": "Rule key\n",
                    "willReplaceOnChanges": true
                },
                "severity": {
                    "type": "string",
                    "description": "Rule severity\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key",
                "rule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualityprofileActivateRule resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Quality Profile key. Can be obtained through api/qualityprofiles/search\n",
                        "willReplaceOnChanges": true
                    },
                    "params": {
                        "type": "string",
                        "description": "Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)\n",
                        "willReplaceOnChanges": true
                    },
                    "reset": {
                        "type": "string",
                        "description": "Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.\n",
                        "willReplaceOnChanges": true
                    },
                    "rule": {
                        "type": "string",
                        "description": "Rule key\n",
                        "willReplaceOnChanges": true
                    },
                    "severity": {
                        "type": "string",
                        "description": "Rule severity\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/qualityprofileProjectAssociation:QualityprofileProjectAssociation": {
            "description": "## # sonarqube.QualityprofileProjectAssociation\n\nProvides a Sonarqube Quality Profile Project association resource. This can be used to associate a Quality Profile to a Project\n\n## Example: create a quality profile project association\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst mainQualityprofile = new sonarqube.Qualityprofile(\"mainQualityprofile\", {language: \"js\"});\nconst mainProject = new sonarqube.Project(\"mainProject\", {\n    project: \"my_project\",\n    visibility: \"public\",\n});\nconst mainQualityprofileProjectAssociation = new sonarqube.QualityprofileProjectAssociation(\"mainQualityprofileProjectAssociation\", {\n    qualityProfile: mainQualityprofile.name,\n    project: mainProject.project,\n    language: \"js\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain_qualityprofile = sonarqube.Qualityprofile(\"mainQualityprofile\", language=\"js\")\nmain_project = sonarqube.Project(\"mainProject\",\n    project=\"my_project\",\n    visibility=\"public\")\nmain_qualityprofile_project_association = sonarqube.QualityprofileProjectAssociation(\"mainQualityprofileProjectAssociation\",\n    quality_profile=main_qualityprofile.name,\n    project=main_project.project,\n    language=\"js\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainQualityprofile = new Sonarqube.Qualityprofile(\"mainQualityprofile\", new()\n    {\n        Language = \"js\",\n    });\n\n    var mainProject = new Sonarqube.Project(\"mainProject\", new()\n    {\n        ProjectName = \"my_project\",\n        Visibility = \"public\",\n    });\n\n    var mainQualityprofileProjectAssociation = new Sonarqube.QualityprofileProjectAssociation(\"mainQualityprofileProjectAssociation\", new()\n    {\n        QualityProfile = mainQualityprofile.Name,\n        Project = mainProject.ProjectName,\n        Language = \"js\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainQualityprofile, err := sonarqube.NewQualityprofile(ctx, \"mainQualityprofile\", \u0026sonarqube.QualityprofileArgs{\n\t\t\tLanguage: pulumi.String(\"js\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainProject, err := sonarqube.NewProject(ctx, \"mainProject\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"my_project\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewQualityprofileProjectAssociation(ctx, \"mainQualityprofileProjectAssociation\", \u0026sonarqube.QualityprofileProjectAssociationArgs{\n\t\t\tQualityProfile: mainQualityprofile.Name,\n\t\t\tProject:        mainProject.Project,\n\t\t\tLanguage:       pulumi.String(\"js\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Qualityprofile;\nimport com.pulumi.sonarqube.QualityprofileArgs;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.QualityprofileProjectAssociation;\nimport com.pulumi.sonarqube.QualityprofileProjectAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainQualityprofile = new Qualityprofile(\"mainQualityprofile\", QualityprofileArgs.builder()        \n            .language(\"js\")\n            .build());\n\n        var mainProject = new Project(\"mainProject\", ProjectArgs.builder()        \n            .project(\"my_project\")\n            .visibility(\"public\")\n            .build());\n\n        var mainQualityprofileProjectAssociation = new QualityprofileProjectAssociation(\"mainQualityprofileProjectAssociation\", QualityprofileProjectAssociationArgs.builder()        \n            .qualityProfile(mainQualityprofile.name())\n            .project(mainProject.project())\n            .language(\"js\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainQualityprofile:\n    type: sonarqube:Qualityprofile\n    properties:\n      language: js\n  mainProject:\n    type: sonarqube:Project\n    properties:\n      project: my_project\n      visibility: public\n  mainQualityprofileProjectAssociation:\n    type: sonarqube:QualityprofileProjectAssociation\n    properties:\n      qualityProfile: ${mainQualityprofile.name}\n      project: ${mainProject.project}\n      language: js\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "properties": {
                "language": {
                    "type": "string",
                    "description": "Quality profile language\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project key\n"
                },
                "qualityProfile": {
                    "type": "string",
                    "description": "Quality profile name\n"
                }
            },
            "required": [
                "language",
                "project",
                "qualityProfile"
            ],
            "inputProperties": {
                "language": {
                    "type": "string",
                    "description": "Quality profile language\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "Project key\n",
                    "willReplaceOnChanges": true
                },
                "qualityProfile": {
                    "type": "string",
                    "description": "Quality profile name\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "language",
                "project",
                "qualityProfile"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualityprofileProjectAssociation resources.\n",
                "properties": {
                    "language": {
                        "type": "string",
                        "description": "Quality profile language\n",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "description": "Project key\n",
                        "willReplaceOnChanges": true
                    },
                    "qualityProfile": {
                        "type": "string",
                        "description": "Quality profile name\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/rule:Rule": {
            "properties": {
                "customKey": {
                    "type": "string",
                    "description": "Key of the custom rule\n"
                },
                "markdownDescription": {
                    "type": "string",
                    "description": "Rule description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "params": {
                    "type": "string",
                    "description": "Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)\n"
                },
                "preventReactivation": {
                    "type": "string",
                    "description": "If set to true and if the rule has been deactivated (status 'REMOVED'), a status 409 will be returned\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Rule severity\n"
                },
                "status": {
                    "type": "string",
                    "description": "Rule status\n"
                },
                "templateKey": {
                    "type": "string",
                    "description": "Key of the template rule in order to create a custom rule (mandatory for custom rule)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rule type\n"
                }
            },
            "required": [
                "customKey",
                "markdownDescription",
                "name",
                "templateKey"
            ],
            "inputProperties": {
                "customKey": {
                    "type": "string",
                    "description": "Key of the custom rule\n",
                    "willReplaceOnChanges": true
                },
                "markdownDescription": {
                    "type": "string",
                    "description": "Rule description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n",
                    "willReplaceOnChanges": true
                },
                "params": {
                    "type": "string",
                    "description": "Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)\n"
                },
                "preventReactivation": {
                    "type": "string",
                    "description": "If set to true and if the rule has been deactivated (status 'REMOVED'), a status 409 will be returned\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Rule severity\n"
                },
                "status": {
                    "type": "string",
                    "description": "Rule status\n"
                },
                "templateKey": {
                    "type": "string",
                    "description": "Key of the template rule in order to create a custom rule (mandatory for custom rule)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rule type\n"
                }
            },
            "requiredInputs": [
                "customKey",
                "markdownDescription",
                "templateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "customKey": {
                        "type": "string",
                        "description": "Key of the custom rule\n",
                        "willReplaceOnChanges": true
                    },
                    "markdownDescription": {
                        "type": "string",
                        "description": "Rule description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name\n",
                        "willReplaceOnChanges": true
                    },
                    "params": {
                        "type": "string",
                        "description": "Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)\n"
                    },
                    "preventReactivation": {
                        "type": "string",
                        "description": "If set to true and if the rule has been deactivated (status 'REMOVED'), a status 409 will be returned\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "Rule severity\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Rule status\n"
                    },
                    "templateKey": {
                        "type": "string",
                        "description": "Key of the template rule in order to create a custom rule (mandatory for custom rule)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Rule type\n"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/setting:Setting": {
            "properties": {
                "fieldValues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "Setting field values for the supplied key\n"
                },
                "key": {
                    "type": "string",
                    "description": "Setting key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Setting value. To reset a value, please use the reset web service.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Setting multi values for the supplied key\n"
                }
            },
            "required": [
                "key"
            ],
            "inputProperties": {
                "fieldValues": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "Setting field values for the supplied key\n"
                },
                "key": {
                    "type": "string",
                    "description": "Setting key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Setting value. To reset a value, please use the reset web service.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Setting multi values for the supplied key\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "fieldValues": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "Setting field values for the supplied key\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Setting key\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Setting value. To reset a value, please use the reset web service.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Setting multi values for the supplied key\n"
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/user:User": {
            "description": "## # sonarqube.User\n\nProvides a Sonarqube User resource. This can be used to manage Sonarqube Users.\n\n**Note**: By default Sonarqube only *deactivates* a user on `destroy` but keeps its personal data in the database. Since release `9.7` it\nis possible to automatically anonymize the data. This can be helpful to comply with regulations like [GDPR](https://en.wikipedia.org/wiki/General_Data_Protection_Regulation).\nThis behaviour can be activated with the `anonymize_user_on_delete` flag on the `provider` configuration.\n\n## Example: create a local user\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst user = new sonarqube.User(\"user\", {\n    loginName: \"terraform-test\",\n    password: \"secret-sauce37!\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nuser = sonarqube.User(\"user\",\n    login_name=\"terraform-test\",\n    password=\"secret-sauce37!\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = new Sonarqube.User(\"user\", new()\n    {\n        LoginName = \"terraform-test\",\n        Password = \"secret-sauce37!\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewUser(ctx, \"user\", \u0026sonarqube.UserArgs{\n\t\t\tLoginName: pulumi.String(\"terraform-test\"),\n\t\t\tPassword:  pulumi.String(\"secret-sauce37!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.User;\nimport com.pulumi.sonarqube.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .loginName(\"terraform-test\")\n            .password(\"secret-sauce37!\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: sonarqube:User\n    properties:\n      loginName: terraform-test\n      password: secret-sauce37!\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: create a remote user\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst remoteUser = new sonarqube.User(\"remoteUser\", {\n    email: \"terraform-test@sonarqube.com\",\n    isLocal: false,\n    loginName: \"terraform-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nremote_user = sonarqube.User(\"remoteUser\",\n    email=\"terraform-test@sonarqube.com\",\n    is_local=False,\n    login_name=\"terraform-test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var remoteUser = new Sonarqube.User(\"remoteUser\", new()\n    {\n        Email = \"terraform-test@sonarqube.com\",\n        IsLocal = false,\n        LoginName = \"terraform-test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewUser(ctx, \"remoteUser\", \u0026sonarqube.UserArgs{\n\t\t\tEmail:     pulumi.String(\"terraform-test@sonarqube.com\"),\n\t\t\tIsLocal:   pulumi.Bool(false),\n\t\t\tLoginName: pulumi.String(\"terraform-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.User;\nimport com.pulumi.sonarqube.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var remoteUser = new User(\"remoteUser\", UserArgs.builder()        \n            .email(\"terraform-test@sonarqube.com\")\n            .isLocal(false)\n            .loginName(\"terraform-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  remoteUser:\n    type: sonarqube:User\n    properties:\n      email: terraform-test@sonarqube.com\n      isLocal: false\n      loginName: terraform-test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsers can be imported using their `login_name`:\n\nterraform\n\n```sh\n$ pulumi import sonarqube:index/user:User user terraform-test\n```\n\n",
            "properties": {
                "email": {
                    "type": "string"
                },
                "isLocal": {
                    "type": "boolean"
                },
                "loginName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                }
            },
            "required": [
                "loginName",
                "name"
            ],
            "inputProperties": {
                "email": {
                    "type": "string"
                },
                "isLocal": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "loginName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "loginName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "isLocal": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "loginName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/userExternalIdentity:UserExternalIdentity": {
            "description": "## # sonarqube_user_external_entity\n\nUpdates the *external identity* of a *non local* Sonarqube User. This can be used to set the *Identity Provider* which should be used to\nauthenticate a specific user.\n\nThe Sonarqube API currently does not provide an endpoint to read the *external identity* setting of an user. \n\n## Example: change the external identity to SAML\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst remoteUserUser = new sonarqube.User(\"remoteUserUser\", {\n    loginName: \"terraform-test\",\n    email: \"terraform-test@sonarqube.com\",\n    isLocal: false,\n});\nconst remoteUserUserExternalIdentity = new sonarqube.UserExternalIdentity(\"remoteUserUserExternalIdentity\", {\n    loginName: remoteUserUser.loginName,\n    externalIdentity: \"terraform-test@sonarqube.com\",\n    externalProvider: \"saml\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nremote_user_user = sonarqube.User(\"remoteUserUser\",\n    login_name=\"terraform-test\",\n    email=\"terraform-test@sonarqube.com\",\n    is_local=False)\nremote_user_user_external_identity = sonarqube.UserExternalIdentity(\"remoteUserUserExternalIdentity\",\n    login_name=remote_user_user.login_name,\n    external_identity=\"terraform-test@sonarqube.com\",\n    external_provider=\"saml\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var remoteUserUser = new Sonarqube.User(\"remoteUserUser\", new()\n    {\n        LoginName = \"terraform-test\",\n        Email = \"terraform-test@sonarqube.com\",\n        IsLocal = false,\n    });\n\n    var remoteUserUserExternalIdentity = new Sonarqube.UserExternalIdentity(\"remoteUserUserExternalIdentity\", new()\n    {\n        LoginName = remoteUserUser.LoginName,\n        ExternalIdentity = \"terraform-test@sonarqube.com\",\n        ExternalProvider = \"saml\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tremoteUserUser, err := sonarqube.NewUser(ctx, \"remoteUserUser\", \u0026sonarqube.UserArgs{\n\t\t\tLoginName: pulumi.String(\"terraform-test\"),\n\t\t\tEmail:     pulumi.String(\"terraform-test@sonarqube.com\"),\n\t\t\tIsLocal:   pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewUserExternalIdentity(ctx, \"remoteUserUserExternalIdentity\", \u0026sonarqube.UserExternalIdentityArgs{\n\t\t\tLoginName:        remoteUserUser.LoginName,\n\t\t\tExternalIdentity: pulumi.String(\"terraform-test@sonarqube.com\"),\n\t\t\tExternalProvider: pulumi.String(\"saml\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.User;\nimport com.pulumi.sonarqube.UserArgs;\nimport com.pulumi.sonarqube.UserExternalIdentity;\nimport com.pulumi.sonarqube.UserExternalIdentityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var remoteUserUser = new User(\"remoteUserUser\", UserArgs.builder()        \n            .loginName(\"terraform-test\")\n            .email(\"terraform-test@sonarqube.com\")\n            .isLocal(false)\n            .build());\n\n        var remoteUserUserExternalIdentity = new UserExternalIdentity(\"remoteUserUserExternalIdentity\", UserExternalIdentityArgs.builder()        \n            .loginName(remoteUserUser.loginName())\n            .externalIdentity(\"terraform-test@sonarqube.com\")\n            .externalProvider(\"saml\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  remoteUserUser:\n    type: sonarqube:User\n    properties:\n      loginName: terraform-test\n      email: terraform-test@sonarqube.com\n      isLocal: false\n  remoteUserUserExternalIdentity:\n    type: sonarqube:UserExternalIdentity\n    properties:\n      loginName: ${remoteUserUser.loginName}\n      externalIdentity: terraform-test@sonarqube.com\n      externalProvider: saml\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "externalIdentity": {
                    "type": "string",
                    "description": "The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be \ncreated.\n"
                },
                "externalProvider": {
                    "type": "string",
                    "description": "The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing \nthis forces a new resource to be created.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name of the User to update. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "externalIdentity",
                "externalProvider",
                "loginName"
            ],
            "inputProperties": {
                "externalIdentity": {
                    "type": "string",
                    "description": "The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be \ncreated.\n",
                    "willReplaceOnChanges": true
                },
                "externalProvider": {
                    "type": "string",
                    "description": "The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing \nthis forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name of the User to update. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "externalIdentity",
                "externalProvider",
                "loginName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserExternalIdentity resources.\n",
                "properties": {
                    "externalIdentity": {
                        "type": "string",
                        "description": "The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be \ncreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "externalProvider": {
                        "type": "string",
                        "description": "The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing \nthis forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The login name of the User to update. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/userToken:UserToken": {
            "description": "## # sonarqube.UserToken\n\nProvides a Sonarqube User token resource. This can be used to manage Sonarqube User tokens.\n\n## Example: create a user, user token and output the token value\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst user = new sonarqube.User(\"user\", {\n    loginName: \"terraform-test\",\n    password: \"secret-sauce37!\",\n});\nconst token = new sonarqube.UserToken(\"token\", {loginName: user.loginName});\nexport const userToken = token.token;\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nuser = sonarqube.User(\"user\",\n    login_name=\"terraform-test\",\n    password=\"secret-sauce37!\")\ntoken = sonarqube.UserToken(\"token\", login_name=user.login_name)\npulumi.export(\"userToken\", token.token)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = new Sonarqube.User(\"user\", new()\n    {\n        LoginName = \"terraform-test\",\n        Password = \"secret-sauce37!\",\n    });\n\n    var token = new Sonarqube.UserToken(\"token\", new()\n    {\n        LoginName = user.LoginName,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"userToken\"] = token.Token,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser, err := sonarqube.NewUser(ctx, \"user\", \u0026sonarqube.UserArgs{\n\t\t\tLoginName: pulumi.String(\"terraform-test\"),\n\t\t\tPassword:  pulumi.String(\"secret-sauce37!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttoken, err := sonarqube.NewUserToken(ctx, \"token\", \u0026sonarqube.UserTokenArgs{\n\t\t\tLoginName: user.LoginName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"userToken\", token.Token)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.User;\nimport com.pulumi.sonarqube.UserArgs;\nimport com.pulumi.sonarqube.UserToken;\nimport com.pulumi.sonarqube.UserTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .loginName(\"terraform-test\")\n            .password(\"secret-sauce37!\")\n            .build());\n\n        var token = new UserToken(\"token\", UserTokenArgs.builder()        \n            .loginName(user.loginName())\n            .build());\n\n        ctx.export(\"userToken\", token.token());\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: sonarqube:User\n    properties:\n      loginName: terraform-test\n      password: secret-sauce37!\n  token:\n    type: sonarqube:UserToken\n    properties:\n      loginName: ${user.loginName}\noutputs:\n  userToken: ${token.token}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: create an expiring global analysis token and output the token value\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst token = new sonarqube.UserToken(\"token\", {\n    type: \"GLOBAL_ANALYSIS_TOKEN\",\n    expirationDate: \"2099-01-01\",\n});\nexport const globalAnalysisToken = token.token;\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ntoken = sonarqube.UserToken(\"token\",\n    type=\"GLOBAL_ANALYSIS_TOKEN\",\n    expiration_date=\"2099-01-01\")\npulumi.export(\"globalAnalysisToken\", token.token)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var token = new Sonarqube.UserToken(\"token\", new()\n    {\n        Type = \"GLOBAL_ANALYSIS_TOKEN\",\n        ExpirationDate = \"2099-01-01\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"globalAnalysisToken\"] = token.Token,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttoken, err := sonarqube.NewUserToken(ctx, \"token\", \u0026sonarqube.UserTokenArgs{\n\t\t\tType:           pulumi.String(\"GLOBAL_ANALYSIS_TOKEN\"),\n\t\t\tExpirationDate: pulumi.String(\"2099-01-01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"globalAnalysisToken\", token.Token)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.UserToken;\nimport com.pulumi.sonarqube.UserTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var token = new UserToken(\"token\", UserTokenArgs.builder()        \n            .type(\"GLOBAL_ANALYSIS_TOKEN\")\n            .expirationDate(\"2099-01-01\")\n            .build());\n\n        ctx.export(\"globalAnalysisToken\", token.token());\n    }\n}\n```\n```yaml\nresources:\n  token:\n    type: sonarqube:UserToken\n    properties:\n      type: GLOBAL_ANALYSIS_TOKEN\n      expirationDate: 2099-01-01\noutputs:\n  globalAnalysisToken: ${token.token}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: create a project, project analysis token, and output the token value\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst token = new sonarqube.UserToken(\"token\", {\n    type: \"PROJECT_ANALYSIS_TOKEN\",\n    projectKey: \"my-project\",\n});\nexport const projectAnalysisToken = token.token;\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ntoken = sonarqube.UserToken(\"token\",\n    type=\"PROJECT_ANALYSIS_TOKEN\",\n    project_key=\"my-project\")\npulumi.export(\"projectAnalysisToken\", token.token)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var token = new Sonarqube.UserToken(\"token\", new()\n    {\n        Type = \"PROJECT_ANALYSIS_TOKEN\",\n        ProjectKey = \"my-project\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectAnalysisToken\"] = token.Token,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttoken, err := sonarqube.NewUserToken(ctx, \"token\", \u0026sonarqube.UserTokenArgs{\n\t\t\tType:       pulumi.String(\"PROJECT_ANALYSIS_TOKEN\"),\n\t\t\tProjectKey: pulumi.String(\"my-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectAnalysisToken\", token.Token)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.UserToken;\nimport com.pulumi.sonarqube.UserTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var token = new UserToken(\"token\", UserTokenArgs.builder()        \n            .type(\"PROJECT_ANALYSIS_TOKEN\")\n            .projectKey(\"my-project\")\n            .build());\n\n        ctx.export(\"projectAnalysisToken\", token.token());\n    }\n}\n```\n```yaml\nresources:\n  token:\n    type: sonarqube:UserToken\n    properties:\n      type: PROJECT_ANALYSIS_TOKEN\n      projectKey: my-project\noutputs:\n  projectAnalysisToken: ${token.token}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport is not supported for this resource.\n\n",
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectKey": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "expirationDate",
                "name",
                "token"
            ],
            "inputProperties": {
                "expirationDate": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "loginName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "projectKey": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserToken resources.\n",
                "properties": {
                    "expirationDate": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "loginName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "projectKey": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sonarqube:index/webhook:Webhook": {
            "description": "## # sonarqube.Webhook\n\nProvides a Sonarqube Webhook resource. This can be used to manage Sonarqube webhooks.\n\n## Example: create a webhook\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst webhook = new sonarqube.Webhook(\"webhook\", {url: \"https://my-webhook-destination.example.com\"});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nwebhook = sonarqube.Webhook(\"webhook\", url=\"https://my-webhook-destination.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhook = new Sonarqube.Webhook(\"webhook\", new()\n    {\n        Url = \"https://my-webhook-destination.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.NewWebhook(ctx, \"webhook\", \u0026sonarqube.WebhookArgs{\n\t\t\tUrl: pulumi.String(\"https://my-webhook-destination.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Webhook;\nimport com.pulumi.sonarqube.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webhook = new Webhook(\"webhook\", WebhookArgs.builder()        \n            .url(\"https://my-webhook-destination.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webhook:\n    type: sonarqube:Webhook\n    properties:\n      url: https://my-webhook-destination.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example: create a webhook owned by a project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst project = new sonarqube.Project(\"project\", {\n    project: \"project\",\n    visibility: \"public\",\n});\nconst webhook = new sonarqube.Webhook(\"webhook\", {\n    url: \"https://my-webhook-destination.example.com\",\n    project: project.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nproject = sonarqube.Project(\"project\",\n    project=\"project\",\n    visibility=\"public\")\nwebhook = sonarqube.Webhook(\"webhook\",\n    url=\"https://my-webhook-destination.example.com\",\n    project=project.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Sonarqube.Project(\"project\", new()\n    {\n        ProjectName = \"project\",\n        Visibility = \"public\",\n    });\n\n    var webhook = new Sonarqube.Webhook(\"webhook\", new()\n    {\n        Url = \"https://my-webhook-destination.example.com\",\n        Project = project.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := sonarqube.NewProject(ctx, \"project\", \u0026sonarqube.ProjectArgs{\n\t\t\tProject:    pulumi.String(\"project\"),\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sonarqube.NewWebhook(ctx, \"webhook\", \u0026sonarqube.WebhookArgs{\n\t\t\tUrl:     pulumi.String(\"https://my-webhook-destination.example.com\"),\n\t\t\tProject: project.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.Project;\nimport com.pulumi.sonarqube.ProjectArgs;\nimport com.pulumi.sonarqube.Webhook;\nimport com.pulumi.sonarqube.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new Project(\"project\", ProjectArgs.builder()        \n            .project(\"project\")\n            .visibility(\"public\")\n            .build());\n\n        var webhook = new Webhook(\"webhook\", WebhookArgs.builder()        \n            .url(\"https://my-webhook-destination.example.com\")\n            .project(project.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: sonarqube:Project\n    properties:\n      project: project\n      visibility: public\n  webhook:\n    type: sonarqube:Webhook\n    properties:\n      url: https://my-webhook-destination.example.com\n      project: ${project.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nWebhooks can be imported using their ID (key):\n\nbash\n\n```sh\n$ pulumi import sonarqube:index/webhook:Webhook webhook AXnN9NuxdWLvsEEPOr2g\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "description": "The key of the project that will own the webhook.\n"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "secret",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "description": "The key of the project that will own the webhook.\n",
                    "willReplaceOnChanges": true
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "description": "The key of the project that will own the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "secret": true
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "sonarqube:index/getGroup:getGroup": {
            "description": "## # Data Source: sonarqube.Group\n\nUse this data source to get a Sonarqube Group resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst group = sonarqube.getGroup({\n    name: \"terraform-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\ngroup = sonarqube.get_group(name=\"terraform-test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = Sonarqube.GetGroup.Invoke(new()\n    {\n        Name = \"terraform-test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.LookupGroup(ctx, \u0026sonarqube.LookupGroupArgs{\n\t\t\tName: \"terraform-test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.SonarqubeFunctions;\nimport com.pulumi.sonarqube.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var group = SonarqubeFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"terraform-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  group:\n    fn::invoke:\n      Function: sonarqube:getGroup\n      Arguments:\n        name: terraform-test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "id"
                ]
            }
        },
        "sonarqube:index/getPortfolio:getPortfolio": {
            "description": "## # Data Source: sonarqube.Portfolio\n\nUse this data source to get a Sonarqube portfolio resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst portfolio = sonarqube.getPortfolio({\n    key: \"portfolio-key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nportfolio = sonarqube.get_portfolio(key=\"portfolio-key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var portfolio = Sonarqube.GetPortfolio.Invoke(new()\n    {\n        Key = \"portfolio-key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.LookupPortfolio(ctx, \u0026sonarqube.LookupPortfolioArgs{\n\t\t\tKey: \"portfolio-key\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.SonarqubeFunctions;\nimport com.pulumi.sonarqube.inputs.GetPortfolioArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var portfolio = SonarqubeFunctions.getPortfolio(GetPortfolioArgs.builder()\n            .key(\"portfolio-key\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  portfolio:\n    fn::invoke:\n      Function: sonarqube:getPortfolio\n      Arguments:\n        key: portfolio-key\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPortfolio.\n",
                "properties": {
                    "key": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "key"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPortfolio.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "qualifier": {
                        "type": "string"
                    },
                    "regexp": {
                        "type": "string"
                    },
                    "selectionMode": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "visibility": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "description",
                    "key",
                    "name",
                    "qualifier",
                    "regexp",
                    "selectionMode",
                    "tags",
                    "visibility",
                    "id"
                ]
            }
        },
        "sonarqube:index/getProject:getProject": {
            "description": "## # Data Source: sonarqube.Project\n\nUse this data source to get a Sonarqube project resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst project = sonarqube.getProject({\n    project: \"projet-key-id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nproject = sonarqube.get_project(project=\"projet-key-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = Sonarqube.GetProject.Invoke(new()\n    {\n        Project = \"projet-key-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.LookupProject(ctx, \u0026sonarqube.LookupProjectArgs{\n\t\t\tProject: \"projet-key-id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.SonarqubeFunctions;\nimport com.pulumi.sonarqube.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var project = SonarqubeFunctions.getProject(GetProjectArgs.builder()\n            .project(\"projet-key-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  project:\n    fn::invoke:\n      Function: sonarqube:getProject\n      Arguments:\n        project: projet-key-id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "visibility": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "project",
                    "visibility",
                    "id"
                ]
            }
        },
        "sonarqube:index/getQualitygate:getQualitygate": {
            "description": "## # Data Source: sonarqube.Qualitygate\n\nUse this data source to get a Sonarqube qualitygate resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = sonarqube.getQualitygate({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.get_qualitygate(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Sonarqube.GetQualitygate.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.LookupQualitygate(ctx, \u0026sonarqube.LookupQualitygateArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.SonarqubeFunctions;\nimport com.pulumi.sonarqube.inputs.GetQualitygateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = SonarqubeFunctions.getQualitygate(GetQualitygateArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: sonarqube:getQualitygate\n      Arguments:\n        name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getQualitygate.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQualitygate.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sonarqube:index/getQualitygateCondition:getQualitygateCondition"
                        }
                    },
                    "copyFrom": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "conditions",
                    "copyFrom",
                    "isDefault",
                    "name",
                    "id"
                ]
            }
        },
        "sonarqube:index/getQualityprofile:getQualityprofile": {
            "description": "## # Data Source: sonarqube.Qualityprofile\n\nUse this data source to get a Sonarqube qualityprofile resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst main = sonarqube.getQualityprofile({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nmain = sonarqube.get_qualityprofile(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Sonarqube.GetQualityprofile.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.LookupQualityprofile(ctx, \u0026sonarqube.LookupQualityprofileArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.SonarqubeFunctions;\nimport com.pulumi.sonarqube.inputs.GetQualityprofileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = SonarqubeFunctions.getQualityprofile(GetQualityprofileArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: sonarqube:getQualityprofile\n      Arguments:\n        name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getQualityprofile.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQualityprofile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "key": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "isDefault",
                    "key",
                    "language",
                    "name",
                    "id"
                ]
            }
        },
        "sonarqube:index/getRule:getRule": {
            "description": "## # Data Source: sonarqube.Rule\n\nUse this data source to get a Sonarqube rule resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst rule = sonarqube.getRule({\n    key: \"squid:forbidSonar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nrule = sonarqube.get_rule(key=\"squid:forbidSonar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rule = Sonarqube.GetRule.Invoke(new()\n    {\n        Key = \"squid:forbidSonar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.LookupRule(ctx, \u0026sonarqube.LookupRuleArgs{\n\t\t\tKey: \"squid:forbidSonar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.SonarqubeFunctions;\nimport com.pulumi.sonarqube.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rule = SonarqubeFunctions.getRule(GetRuleArgs.builder()\n            .key(\"squid:forbidSonar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  rule:\n    fn::invoke:\n      Function: sonarqube:getRule\n      Arguments:\n        key: squid:forbidSonar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "key": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "key"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string"
                    },
                    "markdownDescription": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "templateKey": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "markdownDescription",
                    "name",
                    "severity",
                    "status",
                    "templateKey",
                    "type",
                    "id"
                ]
            }
        },
        "sonarqube:index/getUser:getUser": {
            "description": "## # Data Source: sonarqube.User\n\nUse this data source to get a Sonarqube User resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sonarqube from \"@pulumi/sonarqube\";\n\nconst user = sonarqube.getUser({\n    loginName: \"terraform-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sonarqube as sonarqube\n\nuser = sonarqube.get_user(login_name=\"terraform-test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sonarqube = Pulumi.Sonarqube;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = Sonarqube.GetUser.Invoke(new()\n    {\n        LoginName = \"terraform-test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sonarqube.LookupUser(ctx, \u0026sonarqube.LookupUserArgs{\n\t\t\tLoginName: \"terraform-test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sonarqube.SonarqubeFunctions;\nimport com.pulumi.sonarqube.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var user = SonarqubeFunctions.getUser(GetUserArgs.builder()\n            .loginName(\"terraform-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  user:\n    fn::invoke:\n      Function: sonarqube:getUser\n      Arguments:\n        loginName: terraform-test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "loginName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "loginName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isLocal": {
                        "type": "boolean"
                    },
                    "loginName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "isLocal",
                    "loginName",
                    "name",
                    "id"
                ]
            }
        }
    }
}