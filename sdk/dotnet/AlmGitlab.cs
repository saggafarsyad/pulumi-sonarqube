// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.AlmGitlab
    /// 
    /// Provides a Sonarqube GitLab Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops
    /// Platform Integration for GitLab.
    /// 
    /// ## Example: Create a GitHub Alm Integration
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var gitlab_alm = new Sonarqube.AlmGitlab("gitlab-alm", new()
    ///     {
    ///         Key = "myalm",
    ///         PersonalAccessToken = "my_personal_access_token",
    ///         Url = "https://gitlab.com/api/v4",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/almGitlab:AlmGitlab")]
    public partial class AlmGitlab : global::Pulumi.CustomResource
    {
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        [Output("personalAccessToken")]
        public Output<string> PersonalAccessToken { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a AlmGitlab resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlmGitlab(string name, AlmGitlabArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/almGitlab:AlmGitlab", name, args ?? new AlmGitlabArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlmGitlab(string name, Input<string> id, AlmGitlabState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/almGitlab:AlmGitlab", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "personalAccessToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlmGitlab resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlmGitlab Get(string name, Input<string> id, AlmGitlabState? state = null, CustomResourceOptions? options = null)
        {
            return new AlmGitlab(name, id, state, options);
        }
    }

    public sealed class AlmGitlabArgs : global::Pulumi.ResourceArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("personalAccessToken", required: true)]
        private Input<string>? _personalAccessToken;
        public Input<string>? PersonalAccessToken
        {
            get => _personalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _personalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public AlmGitlabArgs()
        {
        }
        public static new AlmGitlabArgs Empty => new AlmGitlabArgs();
    }

    public sealed class AlmGitlabState : global::Pulumi.ResourceArgs
    {
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("personalAccessToken")]
        private Input<string>? _personalAccessToken;
        public Input<string>? PersonalAccessToken
        {
            get => _personalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _personalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("url")]
        public Input<string>? Url { get; set; }

        public AlmGitlabState()
        {
        }
        public static new AlmGitlabState Empty => new AlmGitlabState();
    }
}
