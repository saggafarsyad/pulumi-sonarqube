// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.Qualitygate
    /// 
    /// Provides a Sonarqube Quality Gate resource. This can be used to create and manage Sonarqube Quality Gates and their Conditions.
    /// 
    /// ## Example: create a quality gate
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Sonarqube.Qualitygate("main", new()
    ///     {
    ///         Conditions = new[]
    ///         {
    ///             new Sonarqube.Inputs.QualitygateConditionArgs
    ///             {
    ///                 Metric = "new_coverage",
    ///                 Op = "LT",
    ///                 Threshold = "50",
    ///             },
    ///             new Sonarqube.Inputs.QualitygateConditionArgs
    ///             {
    ///                 Metric = "vulnerabilities",
    ///                 Op = "GT",
    ///                 Threshold = "10",
    ///             },
    ///         },
    ///         IsDefault = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Quality Gates can be imported using its name
    /// 
    /// terraform
    /// 
    /// ```sh
    /// $ pulumi import sonarqube:index/qualitygate:Qualitygate main my-cool-gate
    /// ```
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/qualitygate:Qualitygate")]
    public partial class Qualitygate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of conditions that the gate uses
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.QualitygateCondition>> Conditions { get; private set; } = null!;

        [Output("copyFrom")]
        public Output<string?> CopyFrom { get; private set; } = null!;

        /// <summary>
        /// When set to true this Quality Gate is set as default
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Qualitygate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Qualitygate(string name, QualitygateArgs? args = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/qualitygate:Qualitygate", name, args ?? new QualitygateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Qualitygate(string name, Input<string> id, QualitygateState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/qualitygate:Qualitygate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Qualitygate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Qualitygate Get(string name, Input<string> id, QualitygateState? state = null, CustomResourceOptions? options = null)
        {
            return new Qualitygate(name, id, state, options);
        }
    }

    public sealed class QualitygateArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.QualitygateConditionArgs>? _conditions;

        /// <summary>
        /// A list of conditions that the gate uses
        /// </summary>
        public InputList<Inputs.QualitygateConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.QualitygateConditionArgs>());
            set => _conditions = value;
        }

        [Input("copyFrom")]
        public Input<string>? CopyFrom { get; set; }

        /// <summary>
        /// When set to true this Quality Gate is set as default
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public QualitygateArgs()
        {
        }
        public static new QualitygateArgs Empty => new QualitygateArgs();
    }

    public sealed class QualitygateState : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.QualitygateConditionGetArgs>? _conditions;

        /// <summary>
        /// A list of conditions that the gate uses
        /// </summary>
        public InputList<Inputs.QualitygateConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.QualitygateConditionGetArgs>());
            set => _conditions = value;
        }

        [Input("copyFrom")]
        public Input<string>? CopyFrom { get; set; }

        /// <summary>
        /// When set to true this Quality Gate is set as default
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public QualitygateState()
        {
        }
        public static new QualitygateState Empty => new QualitygateState();
    }
}
