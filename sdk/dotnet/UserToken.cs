// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.UserToken
    /// 
    /// Provides a Sonarqube User token resource. This can be used to manage Sonarqube User tokens.
    /// 
    /// ## Example: create a user, user token and output the token value
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var user = new Sonarqube.User("user", new()
    ///     {
    ///         LoginName = "terraform-test",
    ///         Password = "secret-sauce37!",
    ///     });
    /// 
    ///     var token = new Sonarqube.UserToken("token", new()
    ///     {
    ///         LoginName = user.LoginName,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["userToken"] = token.Token,
    ///     };
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Example: create an expiring global analysis token and output the token value
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var token = new Sonarqube.UserToken("token", new()
    ///     {
    ///         Type = "GLOBAL_ANALYSIS_TOKEN",
    ///         ExpirationDate = "2099-01-01",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["globalAnalysisToken"] = token.Token,
    ///     };
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Example: create a project, project analysis token, and output the token value
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var token = new Sonarqube.UserToken("token", new()
    ///     {
    ///         Type = "PROJECT_ANALYSIS_TOKEN",
    ///         ProjectKey = "my-project",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["projectAnalysisToken"] = token.Token,
    ///     };
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Import is not supported for this resource.
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/userToken:UserToken")]
    public partial class UserToken : global::Pulumi.CustomResource
    {
        [Output("expirationDate")]
        public Output<string> ExpirationDate { get; private set; } = null!;

        [Output("loginName")]
        public Output<string?> LoginName { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("projectKey")]
        public Output<string?> ProjectKey { get; private set; } = null!;

        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a UserToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserToken(string name, UserTokenArgs? args = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/userToken:UserToken", name, args ?? new UserTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserToken(string name, Input<string> id, UserTokenState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/userToken:UserToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserToken Get(string name, Input<string> id, UserTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new UserToken(name, id, state, options);
        }
    }

    public sealed class UserTokenArgs : global::Pulumi.ResourceArgs
    {
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public UserTokenArgs()
        {
        }
        public static new UserTokenArgs Empty => new UserTokenArgs();
    }

    public sealed class UserTokenState : global::Pulumi.ResourceArgs
    {
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("token")]
        private Input<string>? _token;
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public UserTokenState()
        {
        }
        public static new UserTokenState Empty => new UserTokenState();
    }
}
