// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    public static class GetRule
    {
        /// <summary>
        /// ## # Data Source: sonarqube.Rule
        /// 
        /// Use this data source to get a Sonarqube rule resource
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sonarqube = Pulumi.Sonarqube;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rule = Sonarqube.GetRule.Invoke(new()
        ///     {
        ///         Key = "squid:forbidSonar",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRuleResult> InvokeAsync(GetRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRuleResult>("sonarqube:index/getRule:getRule", args ?? new GetRuleArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: sonarqube.Rule
        /// 
        /// Use this data source to get a Sonarqube rule resource
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sonarqube = Pulumi.Sonarqube;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rule = Sonarqube.GetRule.Invoke(new()
        ///     {
        ///         Key = "squid:forbidSonar",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRuleResult> Invoke(GetRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRuleResult>("sonarqube:index/getRule:getRule", args ?? new GetRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        public GetRuleArgs()
        {
        }
        public static new GetRuleArgs Empty => new GetRuleArgs();
    }

    public sealed class GetRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public GetRuleInvokeArgs()
        {
        }
        public static new GetRuleInvokeArgs Empty => new GetRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRuleResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Key;
        public readonly string MarkdownDescription;
        public readonly string Name;
        public readonly string Severity;
        public readonly string Status;
        public readonly string TemplateKey;
        public readonly string Type;

        [OutputConstructor]
        private GetRuleResult(
            string id,

            string key,

            string markdownDescription,

            string name,

            string severity,

            string status,

            string templateKey,

            string type)
        {
            Id = id;
            Key = key;
            MarkdownDescription = markdownDescription;
            Name = name;
            Severity = severity;
            Status = status;
            TemplateKey = templateKey;
            Type = type;
        }
    }
}
