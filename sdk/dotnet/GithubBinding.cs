// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.GithubBinding
    /// 
    /// Provides a Sonarqube GitHub binding resource. This can be used to create and manage the binding between a
    /// GitHub repository and a SonarQube project
    /// 
    /// ## Example: Create a GitHub binding
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var github_alm = new Sonarqube.AlmGithub("github-alm", new()
    ///     {
    ///         AppId = "12345",
    ///         ClientId = "56789",
    ///         ClientSecret = "secret",
    ///         Key = "myalm",
    ///         PrivateKey = "myprivate_key",
    ///         Url = "https://api.github.com",
    ///         WebhookSecret = "mysecret",
    ///     });
    /// 
    ///     var main = new Sonarqube.Project("main", new()
    ///     {
    ///         ProjectName = "my_project",
    ///         Visibility = "public",
    ///     });
    /// 
    ///     var github_binding = new Sonarqube.GithubBinding("github-binding", new()
    ///     {
    ///         AlmSetting = github_alm.Key,
    ///         Project = "my_project",
    ///         Repository = "myorg/myrepo",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Bindings can be imported using their ID
    /// 
    /// terraform
    /// 
    /// ```sh
    /// $ pulumi import sonarqube:index/githubBinding:GithubBinding github-binding project/repository
    /// ```
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/githubBinding:GithubBinding")]
    public partial class GithubBinding : global::Pulumi.CustomResource
    {
        [Output("almSetting")]
        public Output<string> AlmSetting { get; private set; } = null!;

        [Output("monorepo")]
        public Output<string?> Monorepo { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        [Output("summaryCommentEnabled")]
        public Output<string?> SummaryCommentEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a GithubBinding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GithubBinding(string name, GithubBindingArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/githubBinding:GithubBinding", name, args ?? new GithubBindingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GithubBinding(string name, Input<string> id, GithubBindingState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/githubBinding:GithubBinding", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GithubBinding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GithubBinding Get(string name, Input<string> id, GithubBindingState? state = null, CustomResourceOptions? options = null)
        {
            return new GithubBinding(name, id, state, options);
        }
    }

    public sealed class GithubBindingArgs : global::Pulumi.ResourceArgs
    {
        [Input("almSetting", required: true)]
        public Input<string> AlmSetting { get; set; } = null!;

        [Input("monorepo")]
        public Input<string>? Monorepo { get; set; }

        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        [Input("summaryCommentEnabled")]
        public Input<string>? SummaryCommentEnabled { get; set; }

        public GithubBindingArgs()
        {
        }
        public static new GithubBindingArgs Empty => new GithubBindingArgs();
    }

    public sealed class GithubBindingState : global::Pulumi.ResourceArgs
    {
        [Input("almSetting")]
        public Input<string>? AlmSetting { get; set; }

        [Input("monorepo")]
        public Input<string>? Monorepo { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("repository")]
        public Input<string>? Repository { get; set; }

        [Input("summaryCommentEnabled")]
        public Input<string>? SummaryCommentEnabled { get; set; }

        public GithubBindingState()
        {
        }
        public static new GithubBindingState Empty => new GithubBindingState();
    }
}
