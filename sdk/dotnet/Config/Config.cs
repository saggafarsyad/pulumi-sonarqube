// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Sonarqube
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("sonarqube");

        private static readonly __Value<bool?> _anonymizeUserOnDelete = new __Value<bool?>(() => __config.GetBoolean("anonymizeUserOnDelete"));
        /// <summary>
        /// Allows anonymizing users on destroy. Requires Sonarqube version &gt;= 9.7.
        /// </summary>
        public static bool? AnonymizeUserOnDelete
        {
            get => _anonymizeUserOnDelete.Get();
            set => _anonymizeUserOnDelete.Set(value);
        }

        private static readonly __Value<string?> _host = new __Value<string?>(() => __config.Get("host"));
        public static string? Host
        {
            get => _host.Get();
            set => _host.Set(value);
        }

        private static readonly __Value<string?> _httpProxy = new __Value<string?>(() => __config.Get("httpProxy"));
        public static string? HttpProxy
        {
            get => _httpProxy.Get();
            set => _httpProxy.Set(value);
        }

        private static readonly __Value<string?> _installedEdition = new __Value<string?>(() => __config.Get("installedEdition"));
        public static string? InstalledEdition
        {
            get => _installedEdition.Get();
            set => _installedEdition.Set(value);
        }

        private static readonly __Value<string?> _installedVersion = new __Value<string?>(() => __config.Get("installedVersion"));
        public static string? InstalledVersion
        {
            get => _installedVersion.Get();
            set => _installedVersion.Set(value);
        }

        private static readonly __Value<string?> _pass = new __Value<string?>(() => __config.Get("pass"));
        public static string? Pass
        {
            get => _pass.Get();
            set => _pass.Set(value);
        }

        private static readonly __Value<bool?> _tlsInsecureSkipVerify = new __Value<bool?>(() => __config.GetBoolean("tlsInsecureSkipVerify"));
        /// <summary>
        /// Allows ignoring insecure certificates when set to true. Defaults to false. Disabling TLS verification is dangerous and
        /// should only be done for local testing.
        /// </summary>
        public static bool? TlsInsecureSkipVerify
        {
            get => _tlsInsecureSkipVerify.Get();
            set => _tlsInsecureSkipVerify.Set(value);
        }

        private static readonly __Value<string?> _token = new __Value<string?>(() => __config.Get("token"));
        public static string? Token
        {
            get => _token.Get();
            set => _token.Set(value);
        }

        private static readonly __Value<string?> _user = new __Value<string?>(() => __config.Get("user"));
        public static string? User
        {
            get => _user.Get();
            set => _user.Set(value);
        }

    }
}
