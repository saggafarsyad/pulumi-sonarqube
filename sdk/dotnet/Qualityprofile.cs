// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.Qualityprofile
    /// 
    /// Provides a Sonarqube Quality Profile resource. This can be used to create and manage Sonarqube Quality Profiles.
    /// 
    /// ## Example: create a quality profile
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Sonarqube.Qualityprofile("main", new()
    ///     {
    ///         IsDefault = false,
    ///         Language = "js",
    ///         Parent = "sonar way",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Quality Profiles can be imported using their ID
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/qualityprofile:Qualityprofile")]
    public partial class Qualityprofile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Is the default profile
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// Quality profile key
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Quality profile language
        /// </summary>
        [Output("language")]
        public Output<string> Language { get; private set; } = null!;

        /// <summary>
        /// Quality profile name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;


        /// <summary>
        /// Create a Qualityprofile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Qualityprofile(string name, QualityprofileArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/qualityprofile:Qualityprofile", name, args ?? new QualityprofileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Qualityprofile(string name, Input<string> id, QualityprofileState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/qualityprofile:Qualityprofile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Qualityprofile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Qualityprofile Get(string name, Input<string> id, QualityprofileState? state = null, CustomResourceOptions? options = null)
        {
            return new Qualityprofile(name, id, state, options);
        }
    }

    public sealed class QualityprofileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is the default profile
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Quality profile language
        /// </summary>
        [Input("language", required: true)]
        public Input<string> Language { get; set; } = null!;

        /// <summary>
        /// Quality profile name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parent")]
        public Input<string>? Parent { get; set; }

        public QualityprofileArgs()
        {
        }
        public static new QualityprofileArgs Empty => new QualityprofileArgs();
    }

    public sealed class QualityprofileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is the default profile
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Quality profile key
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Quality profile language
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// Quality profile name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parent")]
        public Input<string>? Parent { get; set; }

        public QualityprofileState()
        {
        }
        public static new QualityprofileState Empty => new QualityprofileState();
    }
}
