// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    [SonarqubeResourceType("sonarqube:index/setting:Setting")]
    public partial class Setting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Setting field values for the supplied key
        /// </summary>
        [Output("fieldValues")]
        public Output<ImmutableArray<ImmutableDictionary<string, object>>> FieldValues { get; private set; } = null!;

        /// <summary>
        /// Setting key
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Setting value. To reset a value, please use the reset web service.
        /// </summary>
        [Output("value")]
        public Output<string?> Value { get; private set; } = null!;

        /// <summary>
        /// Setting multi values for the supplied key
        /// </summary>
        [Output("values")]
        public Output<ImmutableArray<string>> Values { get; private set; } = null!;


        /// <summary>
        /// Create a Setting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Setting(string name, SettingArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/setting:Setting", name, args ?? new SettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Setting(string name, Input<string> id, SettingState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/setting:Setting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Setting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Setting Get(string name, Input<string> id, SettingState? state = null, CustomResourceOptions? options = null)
        {
            return new Setting(name, id, state, options);
        }
    }

    public sealed class SettingArgs : global::Pulumi.ResourceArgs
    {
        [Input("fieldValues")]
        private InputList<ImmutableDictionary<string, object>>? _fieldValues;

        /// <summary>
        /// Setting field values for the supplied key
        /// </summary>
        public InputList<ImmutableDictionary<string, object>> FieldValues
        {
            get => _fieldValues ?? (_fieldValues = new InputList<ImmutableDictionary<string, object>>());
            set => _fieldValues = value;
        }

        /// <summary>
        /// Setting key
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Setting value. To reset a value, please use the reset web service.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        [Input("values")]
        private InputList<string>? _values;

        /// <summary>
        /// Setting multi values for the supplied key
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public SettingArgs()
        {
        }
        public static new SettingArgs Empty => new SettingArgs();
    }

    public sealed class SettingState : global::Pulumi.ResourceArgs
    {
        [Input("fieldValues")]
        private InputList<ImmutableDictionary<string, object>>? _fieldValues;

        /// <summary>
        /// Setting field values for the supplied key
        /// </summary>
        public InputList<ImmutableDictionary<string, object>> FieldValues
        {
            get => _fieldValues ?? (_fieldValues = new InputList<ImmutableDictionary<string, object>>());
            set => _fieldValues = value;
        }

        /// <summary>
        /// Setting key
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Setting value. To reset a value, please use the reset web service.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        [Input("values")]
        private InputList<string>? _values;

        /// <summary>
        /// Setting multi values for the supplied key
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public SettingState()
        {
        }
        public static new SettingState Empty => new SettingState();
    }
}
