// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.AzureBinding
    /// 
    /// Provides a Sonarqube Azure Devops binding resource. This can be used to create and manage the binding between an
    /// Azure Devops repository and a SonarQube project
    /// 
    /// ## Example: Create an Azure Devops binding
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var az1 = new Sonarqube.AlmAzure("az1", new()
    ///     {
    ///         Key = "az1",
    ///         PersonalAccessToken = "my_pat",
    ///         Url = "https://dev.azure.com/my-org",
    ///     });
    /// 
    ///     var mainProject = new Sonarqube.Project("mainProject", new()
    ///     {
    ///         ProjectName = "main",
    ///         Visibility = "public",
    ///     });
    /// 
    ///     var mainAzureBinding = new Sonarqube.AzureBinding("mainAzureBinding", new()
    ///     {
    ///         AlmSetting = az1.Key,
    ///         Project = mainProject.ProjectName,
    ///         ProjectName = "my_azure_project",
    ///         RepositoryName = "my_repo",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Bindings can be imported using their ID
    /// 
    /// terraform
    /// 
    /// ```sh
    /// $ pulumi import sonarqube:index/azureBinding:AzureBinding main project/project_name/repository
    /// ```
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/azureBinding:AzureBinding")]
    public partial class AzureBinding : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Azure DevOps setting key
        /// </summary>
        [Output("almSetting")]
        public Output<string> AlmSetting { get; private set; } = null!;

        /// <summary>
        /// Is this project part of a monorepo
        /// </summary>
        [Output("monorepo")]
        public Output<bool?> Monorepo { get; private set; } = null!;

        /// <summary>
        /// SonarQube project key
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Azure project name
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Azure repository name
        /// </summary>
        [Output("repositoryName")]
        public Output<string> RepositoryName { get; private set; } = null!;


        /// <summary>
        /// Create a AzureBinding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureBinding(string name, AzureBindingArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/azureBinding:AzureBinding", name, args ?? new AzureBindingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureBinding(string name, Input<string> id, AzureBindingState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/azureBinding:AzureBinding", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureBinding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureBinding Get(string name, Input<string> id, AzureBindingState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureBinding(name, id, state, options);
        }
    }

    public sealed class AzureBindingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Azure DevOps setting key
        /// </summary>
        [Input("almSetting", required: true)]
        public Input<string> AlmSetting { get; set; } = null!;

        /// <summary>
        /// Is this project part of a monorepo
        /// </summary>
        [Input("monorepo")]
        public Input<bool>? Monorepo { get; set; }

        /// <summary>
        /// SonarQube project key
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Azure project name
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// Azure repository name
        /// </summary>
        [Input("repositoryName", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        public AzureBindingArgs()
        {
        }
        public static new AzureBindingArgs Empty => new AzureBindingArgs();
    }

    public sealed class AzureBindingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Azure DevOps setting key
        /// </summary>
        [Input("almSetting")]
        public Input<string>? AlmSetting { get; set; }

        /// <summary>
        /// Is this project part of a monorepo
        /// </summary>
        [Input("monorepo")]
        public Input<bool>? Monorepo { get; set; }

        /// <summary>
        /// SonarQube project key
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Azure project name
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Azure repository name
        /// </summary>
        [Input("repositoryName")]
        public Input<string>? RepositoryName { get; set; }

        public AzureBindingState()
        {
        }
        public static new AzureBindingState Empty => new AzureBindingState();
    }
}
