// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.AlmGithub
    /// 
    /// Provides a Sonarqube GitHub Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops
    /// Platform Integration for GitHub.
    /// 
    /// ## Example: Create a GitHub Alm Integration
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var github_alm = new Sonarqube.AlmGithub("github-alm", new()
    ///     {
    ///         AppId = "12345",
    ///         ClientId = "56789",
    ///         ClientSecret = "secret",
    ///         Key = "myalm",
    ///         PrivateKey = "myprivate_key",
    ///         Url = "https://api.github.com",
    ///         WebhookSecret = "mysecret",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/almGithub:AlmGithub")]
    public partial class AlmGithub : global::Pulumi.CustomResource
    {
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("webhookSecret")]
        public Output<string?> WebhookSecret { get; private set; } = null!;


        /// <summary>
        /// Create a AlmGithub resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlmGithub(string name, AlmGithubArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/almGithub:AlmGithub", name, args ?? new AlmGithubArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlmGithub(string name, Input<string> id, AlmGithubState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/almGithub:AlmGithub", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlmGithub resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlmGithub Get(string name, Input<string> id, AlmGithubState? state = null, CustomResourceOptions? options = null)
        {
            return new AlmGithub(name, id, state, options);
        }
    }

    public sealed class AlmGithubArgs : global::Pulumi.ResourceArgs
    {
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret", required: true)]
        public Input<string> ClientSecret { get; set; } = null!;

        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        [Input("webhookSecret")]
        public Input<string>? WebhookSecret { get; set; }

        public AlmGithubArgs()
        {
        }
        public static new AlmGithubArgs Empty => new AlmGithubArgs();
    }

    public sealed class AlmGithubState : global::Pulumi.ResourceArgs
    {
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("webhookSecret")]
        public Input<string>? WebhookSecret { get; set; }

        public AlmGithubState()
        {
        }
        public static new AlmGithubState Empty => new AlmGithubState();
    }
}
