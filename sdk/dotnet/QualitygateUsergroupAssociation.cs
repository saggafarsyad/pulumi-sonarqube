// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.QualitygateUsergroupAssociation
    /// 
    /// Provides a Sonarqube Quality Gate Usergroup association resource. This can be used to associate a Quality Gate to an User or to a Group.
    /// The feature is available on SonarQube 9.2 or newer.
    /// 
    /// ## Example: create a quality gate group association
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainQualitygate = new Sonarqube.Qualitygate("mainQualitygate", new()
    ///     {
    ///         Conditions = new[]
    ///         {
    ///             new Sonarqube.Inputs.QualitygateConditionArgs
    ///             {
    ///                 Metric = "new_coverage",
    ///                 Op = "LT",
    ///                 Threshold = "30",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var qaTeam = new Sonarqube.Group("qaTeam", new()
    ///     {
    ///         Description = "Quality Assurence Team",
    ///     });
    /// 
    ///     var mainQualitygateUsergroupAssociation = new Sonarqube.QualitygateUsergroupAssociation("mainQualitygateUsergroupAssociation", new()
    ///     {
    ///         Gatename = mainQualitygate.Id,
    ///         GroupName = qaTeam.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Example: create a quality gate user association
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainQualitygate = new Sonarqube.Qualitygate("mainQualitygate", new()
    ///     {
    ///         Conditions = new[]
    ///         {
    ///             new Sonarqube.Inputs.QualitygateConditionArgs
    ///             {
    ///                 Metric = "new_coverage",
    ///                 Op = "LT",
    ///                 Threshold = "30",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var qaUser = new Sonarqube.User("qaUser", new()
    ///     {
    ///         LoginName = "qa-user",
    ///         Password = "secret-sauce37!",
    ///     });
    /// 
    ///     var mainQualitygateUsergroupAssociation = new Sonarqube.QualitygateUsergroupAssociation("mainQualitygateUsergroupAssociation", new()
    ///     {
    ///         Gatename = mainQualitygate.Id,
    ///         LoginName = qaUser.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Import is not required because SonarQube overwrites existing associations.
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation")]
    public partial class QualitygateUsergroupAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Quality Gate
        /// </summary>
        [Output("gatename")]
        public Output<string> Gatename { get; private set; } = null!;

        /// <summary>
        /// The name of the Group to associate. Either `group_name` or `login_name` should be provided.
        /// </summary>
        [Output("groupName")]
        public Output<string?> GroupName { get; private set; } = null!;

        /// <summary>
        /// The name of the User to associate. Either `group_name` or `login_name` should be provided.
        /// </summary>
        [Output("loginName")]
        public Output<string?> LoginName { get; private set; } = null!;


        /// <summary>
        /// Create a QualitygateUsergroupAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QualitygateUsergroupAssociation(string name, QualitygateUsergroupAssociationArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation", name, args ?? new QualitygateUsergroupAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QualitygateUsergroupAssociation(string name, Input<string> id, QualitygateUsergroupAssociationState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QualitygateUsergroupAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QualitygateUsergroupAssociation Get(string name, Input<string> id, QualitygateUsergroupAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new QualitygateUsergroupAssociation(name, id, state, options);
        }
    }

    public sealed class QualitygateUsergroupAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Quality Gate
        /// </summary>
        [Input("gatename", required: true)]
        public Input<string> Gatename { get; set; } = null!;

        /// <summary>
        /// The name of the Group to associate. Either `group_name` or `login_name` should be provided.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// The name of the User to associate. Either `group_name` or `login_name` should be provided.
        /// </summary>
        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        public QualitygateUsergroupAssociationArgs()
        {
        }
        public static new QualitygateUsergroupAssociationArgs Empty => new QualitygateUsergroupAssociationArgs();
    }

    public sealed class QualitygateUsergroupAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Quality Gate
        /// </summary>
        [Input("gatename")]
        public Input<string>? Gatename { get; set; }

        /// <summary>
        /// The name of the Group to associate. Either `group_name` or `login_name` should be provided.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// The name of the User to associate. Either `group_name` or `login_name` should be provided.
        /// </summary>
        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        public QualitygateUsergroupAssociationState()
        {
        }
        public static new QualitygateUsergroupAssociationState Empty => new QualitygateUsergroupAssociationState();
    }
}
