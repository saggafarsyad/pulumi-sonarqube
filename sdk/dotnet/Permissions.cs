// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// ## # sonarqube.Permissions
    /// 
    /// Provides a Sonarqube Permissions resource. This can be used to manage global and project permissions.
    /// 
    /// ## Example: Set global admin permissions for a group called "my-admins"
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myGlobalAdmins = new Sonarqube.Permissions("myGlobalAdmins", new()
    ///     {
    ///         GroupName = "my-admins",
    ///         PermissionList = new[]
    ///         {
    ///             "admin",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Example: Set project admin permissions for a group called "my-project-admins"
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myProjectAdmins = new Sonarqube.Permissions("myProjectAdmins", new()
    ///     {
    ///         GroupName = "my-project-admins",
    ///         PermissionList = new[]
    ///         {
    ///             "admin",
    ///         },
    ///         ProjectKey = "my-project",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Example: Set project admin permissions for a group called "my-project-admins on a permission template"
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var internalAdmins = new Sonarqube.Permissions("internalAdmins", new()
    ///     {
    ///         GroupName = "my-internal-admins",
    ///         TemplateId = sonarqube_permission_template.Template.Id,
    ///         PermissionList = new[]
    ///         {
    ///             "admin",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Example: Set codeviewer &amp; user permissions on project level for a user called "johndoe"
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var johnProjectRead = new Sonarqube.Permissions("johnProjectRead", new()
    ///     {
    ///         LoginName = "johndoe",
    ///         PermissionList = new[]
    ///         {
    ///             "codeviewer",
    ///             "user",
    ///         },
    ///         ProjectKey = "my-project",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Importing is not supported for the `sonarqube_permissions` resource.
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/permissions:Permissions")]
    public partial class Permissions : global::Pulumi.CustomResource
    {
        [Output("groupName")]
        public Output<string?> GroupName { get; private set; } = null!;

        [Output("loginName")]
        public Output<string?> LoginName { get; private set; } = null!;

        [Output("permissions")]
        public Output<ImmutableArray<string>> PermissionList { get; private set; } = null!;

        [Output("projectKey")]
        public Output<string?> ProjectKey { get; private set; } = null!;

        [Output("templateId")]
        public Output<string?> TemplateId { get; private set; } = null!;

        [Output("templateName")]
        public Output<string?> TemplateName { get; private set; } = null!;


        /// <summary>
        /// Create a Permissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permissions(string name, PermissionsArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/permissions:Permissions", name, args ?? new PermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permissions(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/permissions:Permissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permissions Get(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new Permissions(name, id, state, options);
        }
    }

    public sealed class PermissionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        [Input("permissions", required: true)]
        private InputList<string>? _permissions;
        public InputList<string> PermissionList
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        public PermissionsArgs()
        {
        }
        public static new PermissionsArgs Empty => new PermissionsArgs();
    }

    public sealed class PermissionsState : global::Pulumi.ResourceArgs
    {
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;
        public InputList<string> PermissionList
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        public PermissionsState()
        {
        }
        public static new PermissionsState Empty => new PermissionsState();
    }
}
