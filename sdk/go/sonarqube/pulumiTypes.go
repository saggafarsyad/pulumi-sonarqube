// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube/internal"
)

var _ = internal.GetEnvOrDefault

type PortfolioSelectedProject struct {
	// The key of a project to add to the portfolio
	ProjectKey string `pulumi:"projectKey"`
	// A list of branches of the project to add to the portfolio. Defaults to the `MAIN BRANCH` of the repo if omitted
	//
	// Here is an example of how this option can be leveraged:
	SelectedBranches []string `pulumi:"selectedBranches"`
}

// PortfolioSelectedProjectInput is an input type that accepts PortfolioSelectedProjectArgs and PortfolioSelectedProjectOutput values.
// You can construct a concrete instance of `PortfolioSelectedProjectInput` via:
//
//	PortfolioSelectedProjectArgs{...}
type PortfolioSelectedProjectInput interface {
	pulumi.Input

	ToPortfolioSelectedProjectOutput() PortfolioSelectedProjectOutput
	ToPortfolioSelectedProjectOutputWithContext(context.Context) PortfolioSelectedProjectOutput
}

type PortfolioSelectedProjectArgs struct {
	// The key of a project to add to the portfolio
	ProjectKey pulumi.StringInput `pulumi:"projectKey"`
	// A list of branches of the project to add to the portfolio. Defaults to the `MAIN BRANCH` of the repo if omitted
	//
	// Here is an example of how this option can be leveraged:
	SelectedBranches pulumi.StringArrayInput `pulumi:"selectedBranches"`
}

func (PortfolioSelectedProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortfolioSelectedProject)(nil)).Elem()
}

func (i PortfolioSelectedProjectArgs) ToPortfolioSelectedProjectOutput() PortfolioSelectedProjectOutput {
	return i.ToPortfolioSelectedProjectOutputWithContext(context.Background())
}

func (i PortfolioSelectedProjectArgs) ToPortfolioSelectedProjectOutputWithContext(ctx context.Context) PortfolioSelectedProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortfolioSelectedProjectOutput)
}

// PortfolioSelectedProjectArrayInput is an input type that accepts PortfolioSelectedProjectArray and PortfolioSelectedProjectArrayOutput values.
// You can construct a concrete instance of `PortfolioSelectedProjectArrayInput` via:
//
//	PortfolioSelectedProjectArray{ PortfolioSelectedProjectArgs{...} }
type PortfolioSelectedProjectArrayInput interface {
	pulumi.Input

	ToPortfolioSelectedProjectArrayOutput() PortfolioSelectedProjectArrayOutput
	ToPortfolioSelectedProjectArrayOutputWithContext(context.Context) PortfolioSelectedProjectArrayOutput
}

type PortfolioSelectedProjectArray []PortfolioSelectedProjectInput

func (PortfolioSelectedProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortfolioSelectedProject)(nil)).Elem()
}

func (i PortfolioSelectedProjectArray) ToPortfolioSelectedProjectArrayOutput() PortfolioSelectedProjectArrayOutput {
	return i.ToPortfolioSelectedProjectArrayOutputWithContext(context.Background())
}

func (i PortfolioSelectedProjectArray) ToPortfolioSelectedProjectArrayOutputWithContext(ctx context.Context) PortfolioSelectedProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortfolioSelectedProjectArrayOutput)
}

type PortfolioSelectedProjectOutput struct{ *pulumi.OutputState }

func (PortfolioSelectedProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortfolioSelectedProject)(nil)).Elem()
}

func (o PortfolioSelectedProjectOutput) ToPortfolioSelectedProjectOutput() PortfolioSelectedProjectOutput {
	return o
}

func (o PortfolioSelectedProjectOutput) ToPortfolioSelectedProjectOutputWithContext(ctx context.Context) PortfolioSelectedProjectOutput {
	return o
}

// The key of a project to add to the portfolio
func (o PortfolioSelectedProjectOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v PortfolioSelectedProject) string { return v.ProjectKey }).(pulumi.StringOutput)
}

// A list of branches of the project to add to the portfolio. Defaults to the `MAIN BRANCH` of the repo if omitted
//
// Here is an example of how this option can be leveraged:
func (o PortfolioSelectedProjectOutput) SelectedBranches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PortfolioSelectedProject) []string { return v.SelectedBranches }).(pulumi.StringArrayOutput)
}

type PortfolioSelectedProjectArrayOutput struct{ *pulumi.OutputState }

func (PortfolioSelectedProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortfolioSelectedProject)(nil)).Elem()
}

func (o PortfolioSelectedProjectArrayOutput) ToPortfolioSelectedProjectArrayOutput() PortfolioSelectedProjectArrayOutput {
	return o
}

func (o PortfolioSelectedProjectArrayOutput) ToPortfolioSelectedProjectArrayOutputWithContext(ctx context.Context) PortfolioSelectedProjectArrayOutput {
	return o
}

func (o PortfolioSelectedProjectArrayOutput) Index(i pulumi.IntInput) PortfolioSelectedProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortfolioSelectedProject {
		return vs[0].([]PortfolioSelectedProject)[vs[1].(int)]
	}).(PortfolioSelectedProjectOutput)
}

type ProjectSetting struct {
	// Setting field values for the supplied key
	FieldValues []map[string]interface{} `pulumi:"fieldValues"`
	// Setting key
	Key string `pulumi:"key"`
	// Setting a value for the supplied key
	Value *string `pulumi:"value"`
	// Setting multi values for the supplied key
	Values []string `pulumi:"values"`
}

// ProjectSettingInput is an input type that accepts ProjectSettingArgs and ProjectSettingOutput values.
// You can construct a concrete instance of `ProjectSettingInput` via:
//
//	ProjectSettingArgs{...}
type ProjectSettingInput interface {
	pulumi.Input

	ToProjectSettingOutput() ProjectSettingOutput
	ToProjectSettingOutputWithContext(context.Context) ProjectSettingOutput
}

type ProjectSettingArgs struct {
	// Setting field values for the supplied key
	FieldValues pulumi.MapArrayInput `pulumi:"fieldValues"`
	// Setting key
	Key pulumi.StringInput `pulumi:"key"`
	// Setting a value for the supplied key
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Setting multi values for the supplied key
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProjectSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSetting)(nil)).Elem()
}

func (i ProjectSettingArgs) ToProjectSettingOutput() ProjectSettingOutput {
	return i.ToProjectSettingOutputWithContext(context.Background())
}

func (i ProjectSettingArgs) ToProjectSettingOutputWithContext(ctx context.Context) ProjectSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSettingOutput)
}

// ProjectSettingArrayInput is an input type that accepts ProjectSettingArray and ProjectSettingArrayOutput values.
// You can construct a concrete instance of `ProjectSettingArrayInput` via:
//
//	ProjectSettingArray{ ProjectSettingArgs{...} }
type ProjectSettingArrayInput interface {
	pulumi.Input

	ToProjectSettingArrayOutput() ProjectSettingArrayOutput
	ToProjectSettingArrayOutputWithContext(context.Context) ProjectSettingArrayOutput
}

type ProjectSettingArray []ProjectSettingInput

func (ProjectSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSetting)(nil)).Elem()
}

func (i ProjectSettingArray) ToProjectSettingArrayOutput() ProjectSettingArrayOutput {
	return i.ToProjectSettingArrayOutputWithContext(context.Background())
}

func (i ProjectSettingArray) ToProjectSettingArrayOutputWithContext(ctx context.Context) ProjectSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSettingArrayOutput)
}

type ProjectSettingOutput struct{ *pulumi.OutputState }

func (ProjectSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSetting)(nil)).Elem()
}

func (o ProjectSettingOutput) ToProjectSettingOutput() ProjectSettingOutput {
	return o
}

func (o ProjectSettingOutput) ToProjectSettingOutputWithContext(ctx context.Context) ProjectSettingOutput {
	return o
}

// Setting field values for the supplied key
func (o ProjectSettingOutput) FieldValues() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ProjectSetting) []map[string]interface{} { return v.FieldValues }).(pulumi.MapArrayOutput)
}

// Setting key
func (o ProjectSettingOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSetting) string { return v.Key }).(pulumi.StringOutput)
}

// Setting a value for the supplied key
func (o ProjectSettingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSetting) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Setting multi values for the supplied key
func (o ProjectSettingOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSetting) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProjectSettingArrayOutput struct{ *pulumi.OutputState }

func (ProjectSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSetting)(nil)).Elem()
}

func (o ProjectSettingArrayOutput) ToProjectSettingArrayOutput() ProjectSettingArrayOutput {
	return o
}

func (o ProjectSettingArrayOutput) ToProjectSettingArrayOutputWithContext(ctx context.Context) ProjectSettingArrayOutput {
	return o
}

func (o ProjectSettingArrayOutput) Index(i pulumi.IntInput) ProjectSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSetting {
		return vs[0].([]ProjectSetting)[vs[1].(int)]
	}).(ProjectSettingOutput)
}

type QualitygateCondition struct {
	Id        *string `pulumi:"id"`
	Metric    string  `pulumi:"metric"`
	Op        string  `pulumi:"op"`
	Threshold string  `pulumi:"threshold"`
}

// QualitygateConditionInput is an input type that accepts QualitygateConditionArgs and QualitygateConditionOutput values.
// You can construct a concrete instance of `QualitygateConditionInput` via:
//
//	QualitygateConditionArgs{...}
type QualitygateConditionInput interface {
	pulumi.Input

	ToQualitygateConditionOutput() QualitygateConditionOutput
	ToQualitygateConditionOutputWithContext(context.Context) QualitygateConditionOutput
}

type QualitygateConditionArgs struct {
	Id        pulumi.StringPtrInput `pulumi:"id"`
	Metric    pulumi.StringInput    `pulumi:"metric"`
	Op        pulumi.StringInput    `pulumi:"op"`
	Threshold pulumi.StringInput    `pulumi:"threshold"`
}

func (QualitygateConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QualitygateCondition)(nil)).Elem()
}

func (i QualitygateConditionArgs) ToQualitygateConditionOutput() QualitygateConditionOutput {
	return i.ToQualitygateConditionOutputWithContext(context.Background())
}

func (i QualitygateConditionArgs) ToQualitygateConditionOutputWithContext(ctx context.Context) QualitygateConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualitygateConditionOutput)
}

// QualitygateConditionArrayInput is an input type that accepts QualitygateConditionArray and QualitygateConditionArrayOutput values.
// You can construct a concrete instance of `QualitygateConditionArrayInput` via:
//
//	QualitygateConditionArray{ QualitygateConditionArgs{...} }
type QualitygateConditionArrayInput interface {
	pulumi.Input

	ToQualitygateConditionArrayOutput() QualitygateConditionArrayOutput
	ToQualitygateConditionArrayOutputWithContext(context.Context) QualitygateConditionArrayOutput
}

type QualitygateConditionArray []QualitygateConditionInput

func (QualitygateConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QualitygateCondition)(nil)).Elem()
}

func (i QualitygateConditionArray) ToQualitygateConditionArrayOutput() QualitygateConditionArrayOutput {
	return i.ToQualitygateConditionArrayOutputWithContext(context.Background())
}

func (i QualitygateConditionArray) ToQualitygateConditionArrayOutputWithContext(ctx context.Context) QualitygateConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualitygateConditionArrayOutput)
}

type QualitygateConditionOutput struct{ *pulumi.OutputState }

func (QualitygateConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QualitygateCondition)(nil)).Elem()
}

func (o QualitygateConditionOutput) ToQualitygateConditionOutput() QualitygateConditionOutput {
	return o
}

func (o QualitygateConditionOutput) ToQualitygateConditionOutputWithContext(ctx context.Context) QualitygateConditionOutput {
	return o
}

func (o QualitygateConditionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QualitygateCondition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o QualitygateConditionOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v QualitygateCondition) string { return v.Metric }).(pulumi.StringOutput)
}

func (o QualitygateConditionOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v QualitygateCondition) string { return v.Op }).(pulumi.StringOutput)
}

func (o QualitygateConditionOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v QualitygateCondition) string { return v.Threshold }).(pulumi.StringOutput)
}

type QualitygateConditionArrayOutput struct{ *pulumi.OutputState }

func (QualitygateConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QualitygateCondition)(nil)).Elem()
}

func (o QualitygateConditionArrayOutput) ToQualitygateConditionArrayOutput() QualitygateConditionArrayOutput {
	return o
}

func (o QualitygateConditionArrayOutput) ToQualitygateConditionArrayOutputWithContext(ctx context.Context) QualitygateConditionArrayOutput {
	return o
}

func (o QualitygateConditionArrayOutput) Index(i pulumi.IntInput) QualitygateConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QualitygateCondition {
		return vs[0].([]QualitygateCondition)[vs[1].(int)]
	}).(QualitygateConditionOutput)
}

type GetQualitygateCondition struct {
	Id        string `pulumi:"id"`
	Metric    string `pulumi:"metric"`
	Op        string `pulumi:"op"`
	Threshold string `pulumi:"threshold"`
}

// GetQualitygateConditionInput is an input type that accepts GetQualitygateConditionArgs and GetQualitygateConditionOutput values.
// You can construct a concrete instance of `GetQualitygateConditionInput` via:
//
//	GetQualitygateConditionArgs{...}
type GetQualitygateConditionInput interface {
	pulumi.Input

	ToGetQualitygateConditionOutput() GetQualitygateConditionOutput
	ToGetQualitygateConditionOutputWithContext(context.Context) GetQualitygateConditionOutput
}

type GetQualitygateConditionArgs struct {
	Id        pulumi.StringInput `pulumi:"id"`
	Metric    pulumi.StringInput `pulumi:"metric"`
	Op        pulumi.StringInput `pulumi:"op"`
	Threshold pulumi.StringInput `pulumi:"threshold"`
}

func (GetQualitygateConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQualitygateCondition)(nil)).Elem()
}

func (i GetQualitygateConditionArgs) ToGetQualitygateConditionOutput() GetQualitygateConditionOutput {
	return i.ToGetQualitygateConditionOutputWithContext(context.Background())
}

func (i GetQualitygateConditionArgs) ToGetQualitygateConditionOutputWithContext(ctx context.Context) GetQualitygateConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQualitygateConditionOutput)
}

// GetQualitygateConditionArrayInput is an input type that accepts GetQualitygateConditionArray and GetQualitygateConditionArrayOutput values.
// You can construct a concrete instance of `GetQualitygateConditionArrayInput` via:
//
//	GetQualitygateConditionArray{ GetQualitygateConditionArgs{...} }
type GetQualitygateConditionArrayInput interface {
	pulumi.Input

	ToGetQualitygateConditionArrayOutput() GetQualitygateConditionArrayOutput
	ToGetQualitygateConditionArrayOutputWithContext(context.Context) GetQualitygateConditionArrayOutput
}

type GetQualitygateConditionArray []GetQualitygateConditionInput

func (GetQualitygateConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQualitygateCondition)(nil)).Elem()
}

func (i GetQualitygateConditionArray) ToGetQualitygateConditionArrayOutput() GetQualitygateConditionArrayOutput {
	return i.ToGetQualitygateConditionArrayOutputWithContext(context.Background())
}

func (i GetQualitygateConditionArray) ToGetQualitygateConditionArrayOutputWithContext(ctx context.Context) GetQualitygateConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQualitygateConditionArrayOutput)
}

type GetQualitygateConditionOutput struct{ *pulumi.OutputState }

func (GetQualitygateConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQualitygateCondition)(nil)).Elem()
}

func (o GetQualitygateConditionOutput) ToGetQualitygateConditionOutput() GetQualitygateConditionOutput {
	return o
}

func (o GetQualitygateConditionOutput) ToGetQualitygateConditionOutputWithContext(ctx context.Context) GetQualitygateConditionOutput {
	return o
}

func (o GetQualitygateConditionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetQualitygateCondition) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetQualitygateConditionOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v GetQualitygateCondition) string { return v.Metric }).(pulumi.StringOutput)
}

func (o GetQualitygateConditionOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQualitygateCondition) string { return v.Op }).(pulumi.StringOutput)
}

func (o GetQualitygateConditionOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v GetQualitygateCondition) string { return v.Threshold }).(pulumi.StringOutput)
}

type GetQualitygateConditionArrayOutput struct{ *pulumi.OutputState }

func (GetQualitygateConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQualitygateCondition)(nil)).Elem()
}

func (o GetQualitygateConditionArrayOutput) ToGetQualitygateConditionArrayOutput() GetQualitygateConditionArrayOutput {
	return o
}

func (o GetQualitygateConditionArrayOutput) ToGetQualitygateConditionArrayOutputWithContext(ctx context.Context) GetQualitygateConditionArrayOutput {
	return o
}

func (o GetQualitygateConditionArrayOutput) Index(i pulumi.IntInput) GetQualitygateConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQualitygateCondition {
		return vs[0].([]GetQualitygateCondition)[vs[1].(int)]
	}).(GetQualitygateConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortfolioSelectedProjectInput)(nil)).Elem(), PortfolioSelectedProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortfolioSelectedProjectArrayInput)(nil)).Elem(), PortfolioSelectedProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSettingInput)(nil)).Elem(), ProjectSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSettingArrayInput)(nil)).Elem(), ProjectSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualitygateConditionInput)(nil)).Elem(), QualitygateConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualitygateConditionArrayInput)(nil)).Elem(), QualitygateConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQualitygateConditionInput)(nil)).Elem(), GetQualitygateConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQualitygateConditionArrayInput)(nil)).Elem(), GetQualitygateConditionArray{})
	pulumi.RegisterOutputType(PortfolioSelectedProjectOutput{})
	pulumi.RegisterOutputType(PortfolioSelectedProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectSettingOutput{})
	pulumi.RegisterOutputType(ProjectSettingArrayOutput{})
	pulumi.RegisterOutputType(QualitygateConditionOutput{})
	pulumi.RegisterOutputType(QualitygateConditionArrayOutput{})
	pulumi.RegisterOutputType(GetQualitygateConditionOutput{})
	pulumi.RegisterOutputType(GetQualitygateConditionArrayOutput{})
}
