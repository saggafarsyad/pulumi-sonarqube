// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube/internal"
)

// ## # Data Source: Qualitygate
//
// # Use this data source to get a Sonarqube qualitygate resource
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sonarqube.LookupQualitygate(ctx, &sonarqube.LookupQualitygateArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupQualitygate(ctx *pulumi.Context, args *LookupQualitygateArgs, opts ...pulumi.InvokeOption) (*LookupQualitygateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQualitygateResult
	err := ctx.Invoke("sonarqube:index/getQualitygate:getQualitygate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQualitygate.
type LookupQualitygateArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getQualitygate.
type LookupQualitygateResult struct {
	Conditions []GetQualitygateCondition `pulumi:"conditions"`
	CopyFrom   string                    `pulumi:"copyFrom"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	IsDefault bool   `pulumi:"isDefault"`
	Name      string `pulumi:"name"`
}

func LookupQualitygateOutput(ctx *pulumi.Context, args LookupQualitygateOutputArgs, opts ...pulumi.InvokeOption) LookupQualitygateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQualitygateResult, error) {
			args := v.(LookupQualitygateArgs)
			r, err := LookupQualitygate(ctx, &args, opts...)
			var s LookupQualitygateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQualitygateResultOutput)
}

// A collection of arguments for invoking getQualitygate.
type LookupQualitygateOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupQualitygateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQualitygateArgs)(nil)).Elem()
}

// A collection of values returned by getQualitygate.
type LookupQualitygateResultOutput struct{ *pulumi.OutputState }

func (LookupQualitygateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQualitygateResult)(nil)).Elem()
}

func (o LookupQualitygateResultOutput) ToLookupQualitygateResultOutput() LookupQualitygateResultOutput {
	return o
}

func (o LookupQualitygateResultOutput) ToLookupQualitygateResultOutputWithContext(ctx context.Context) LookupQualitygateResultOutput {
	return o
}

func (o LookupQualitygateResultOutput) Conditions() GetQualitygateConditionArrayOutput {
	return o.ApplyT(func(v LookupQualitygateResult) []GetQualitygateCondition { return v.Conditions }).(GetQualitygateConditionArrayOutput)
}

func (o LookupQualitygateResultOutput) CopyFrom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQualitygateResult) string { return v.CopyFrom }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupQualitygateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQualitygateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupQualitygateResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupQualitygateResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

func (o LookupQualitygateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQualitygateResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQualitygateResultOutput{})
}
