// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube/internal"
)

// ## # ProjectMainBranch
//
// Provides a Sonarqube Project main branch resource. This can be used to create and manage a Sonarqube Projects main branch.
//
// ## Example: Change the name of the main branch
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sonarqube.NewProject(ctx, "main", &sonarqube.ProjectArgs{
//				Project:    pulumi.String("my_project"),
//				Visibility: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sonarqube.NewProjectMainBranch(ctx, "mybranch", &sonarqube.ProjectMainBranchArgs{
//				Project: pulumi.String("my_project"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// # Main branch can be imported using their ID
//
// terraform
//
// ```sh
// $ pulumi import sonarqube:index/projectMainBranch:ProjectMainBranch mybranch project/name
// ```
type ProjectMainBranch struct {
	pulumi.CustomResourceState

	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectMainBranch registers a new resource with the given unique name, arguments, and options.
func NewProjectMainBranch(ctx *pulumi.Context,
	name string, args *ProjectMainBranchArgs, opts ...pulumi.ResourceOption) (*ProjectMainBranch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMainBranch
	err := ctx.RegisterResource("sonarqube:index/projectMainBranch:ProjectMainBranch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMainBranch gets an existing ProjectMainBranch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMainBranch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMainBranchState, opts ...pulumi.ResourceOption) (*ProjectMainBranch, error) {
	var resource ProjectMainBranch
	err := ctx.ReadResource("sonarqube:index/projectMainBranch:ProjectMainBranch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMainBranch resources.
type projectMainBranchState struct {
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

type ProjectMainBranchState struct {
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (ProjectMainBranchState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMainBranchState)(nil)).Elem()
}

type projectMainBranchArgs struct {
	Name    *string `pulumi:"name"`
	Project string  `pulumi:"project"`
}

// The set of arguments for constructing a ProjectMainBranch resource.
type ProjectMainBranchArgs struct {
	Name    pulumi.StringPtrInput
	Project pulumi.StringInput
}

func (ProjectMainBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMainBranchArgs)(nil)).Elem()
}

type ProjectMainBranchInput interface {
	pulumi.Input

	ToProjectMainBranchOutput() ProjectMainBranchOutput
	ToProjectMainBranchOutputWithContext(ctx context.Context) ProjectMainBranchOutput
}

func (*ProjectMainBranch) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMainBranch)(nil)).Elem()
}

func (i *ProjectMainBranch) ToProjectMainBranchOutput() ProjectMainBranchOutput {
	return i.ToProjectMainBranchOutputWithContext(context.Background())
}

func (i *ProjectMainBranch) ToProjectMainBranchOutputWithContext(ctx context.Context) ProjectMainBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMainBranchOutput)
}

// ProjectMainBranchArrayInput is an input type that accepts ProjectMainBranchArray and ProjectMainBranchArrayOutput values.
// You can construct a concrete instance of `ProjectMainBranchArrayInput` via:
//
//	ProjectMainBranchArray{ ProjectMainBranchArgs{...} }
type ProjectMainBranchArrayInput interface {
	pulumi.Input

	ToProjectMainBranchArrayOutput() ProjectMainBranchArrayOutput
	ToProjectMainBranchArrayOutputWithContext(context.Context) ProjectMainBranchArrayOutput
}

type ProjectMainBranchArray []ProjectMainBranchInput

func (ProjectMainBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMainBranch)(nil)).Elem()
}

func (i ProjectMainBranchArray) ToProjectMainBranchArrayOutput() ProjectMainBranchArrayOutput {
	return i.ToProjectMainBranchArrayOutputWithContext(context.Background())
}

func (i ProjectMainBranchArray) ToProjectMainBranchArrayOutputWithContext(ctx context.Context) ProjectMainBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMainBranchArrayOutput)
}

// ProjectMainBranchMapInput is an input type that accepts ProjectMainBranchMap and ProjectMainBranchMapOutput values.
// You can construct a concrete instance of `ProjectMainBranchMapInput` via:
//
//	ProjectMainBranchMap{ "key": ProjectMainBranchArgs{...} }
type ProjectMainBranchMapInput interface {
	pulumi.Input

	ToProjectMainBranchMapOutput() ProjectMainBranchMapOutput
	ToProjectMainBranchMapOutputWithContext(context.Context) ProjectMainBranchMapOutput
}

type ProjectMainBranchMap map[string]ProjectMainBranchInput

func (ProjectMainBranchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMainBranch)(nil)).Elem()
}

func (i ProjectMainBranchMap) ToProjectMainBranchMapOutput() ProjectMainBranchMapOutput {
	return i.ToProjectMainBranchMapOutputWithContext(context.Background())
}

func (i ProjectMainBranchMap) ToProjectMainBranchMapOutputWithContext(ctx context.Context) ProjectMainBranchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMainBranchMapOutput)
}

type ProjectMainBranchOutput struct{ *pulumi.OutputState }

func (ProjectMainBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMainBranch)(nil)).Elem()
}

func (o ProjectMainBranchOutput) ToProjectMainBranchOutput() ProjectMainBranchOutput {
	return o
}

func (o ProjectMainBranchOutput) ToProjectMainBranchOutputWithContext(ctx context.Context) ProjectMainBranchOutput {
	return o
}

func (o ProjectMainBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMainBranch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProjectMainBranchOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMainBranch) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ProjectMainBranchArrayOutput struct{ *pulumi.OutputState }

func (ProjectMainBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMainBranch)(nil)).Elem()
}

func (o ProjectMainBranchArrayOutput) ToProjectMainBranchArrayOutput() ProjectMainBranchArrayOutput {
	return o
}

func (o ProjectMainBranchArrayOutput) ToProjectMainBranchArrayOutputWithContext(ctx context.Context) ProjectMainBranchArrayOutput {
	return o
}

func (o ProjectMainBranchArrayOutput) Index(i pulumi.IntInput) ProjectMainBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectMainBranch {
		return vs[0].([]*ProjectMainBranch)[vs[1].(int)]
	}).(ProjectMainBranchOutput)
}

type ProjectMainBranchMapOutput struct{ *pulumi.OutputState }

func (ProjectMainBranchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMainBranch)(nil)).Elem()
}

func (o ProjectMainBranchMapOutput) ToProjectMainBranchMapOutput() ProjectMainBranchMapOutput {
	return o
}

func (o ProjectMainBranchMapOutput) ToProjectMainBranchMapOutputWithContext(ctx context.Context) ProjectMainBranchMapOutput {
	return o
}

func (o ProjectMainBranchMapOutput) MapIndex(k pulumi.StringInput) ProjectMainBranchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectMainBranch {
		return vs[0].(map[string]*ProjectMainBranch)[vs[1].(string)]
	}).(ProjectMainBranchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMainBranchInput)(nil)).Elem(), &ProjectMainBranch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMainBranchArrayInput)(nil)).Elem(), ProjectMainBranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMainBranchMapInput)(nil)).Elem(), ProjectMainBranchMap{})
	pulumi.RegisterOutputType(ProjectMainBranchOutput{})
	pulumi.RegisterOutputType(ProjectMainBranchArrayOutput{})
	pulumi.RegisterOutputType(ProjectMainBranchMapOutput{})
}
