// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube/internal"
)

// ## # QualitygateUsergroupAssociation
//
// Provides a Sonarqube Quality Gate Usergroup association resource. This can be used to associate a Quality Gate to an User or to a Group.
// The feature is available on SonarQube 9.2 or newer.
//
// ## Example: create a quality gate group association
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainQualitygate, err := sonarqube.NewQualitygate(ctx, "mainQualitygate", &sonarqube.QualitygateArgs{
//				Conditions: sonarqube.QualitygateConditionArray{
//					&sonarqube.QualitygateConditionArgs{
//						Metric:    pulumi.String("new_coverage"),
//						Op:        pulumi.String("LT"),
//						Threshold: pulumi.String("30"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			qaTeam, err := sonarqube.NewGroup(ctx, "qaTeam", &sonarqube.GroupArgs{
//				Description: pulumi.String("Quality Assurence Team"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sonarqube.NewQualitygateUsergroupAssociation(ctx, "mainQualitygateUsergroupAssociation", &sonarqube.QualitygateUsergroupAssociationArgs{
//				Gatename:  mainQualitygate.ID(),
//				GroupName: qaTeam.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Example: create a quality gate user association
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainQualitygate, err := sonarqube.NewQualitygate(ctx, "mainQualitygate", &sonarqube.QualitygateArgs{
//				Conditions: sonarqube.QualitygateConditionArray{
//					&sonarqube.QualitygateConditionArgs{
//						Metric:    pulumi.String("new_coverage"),
//						Op:        pulumi.String("LT"),
//						Threshold: pulumi.String("30"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			qaUser, err := sonarqube.NewUser(ctx, "qaUser", &sonarqube.UserArgs{
//				LoginName: pulumi.String("qa-user"),
//				Password:  pulumi.String("secret-sauce37!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sonarqube.NewQualitygateUsergroupAssociation(ctx, "mainQualitygateUsergroupAssociation", &sonarqube.QualitygateUsergroupAssociationArgs{
//				Gatename:  mainQualitygate.ID(),
//				LoginName: qaUser.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Import is not required because SonarQube overwrites existing associations.
type QualitygateUsergroupAssociation struct {
	pulumi.CustomResourceState

	// The name of the Quality Gate
	Gatename pulumi.StringOutput `pulumi:"gatename"`
	// The name of the Group to associate. Either `groupName` or `loginName` should be provided.
	GroupName pulumi.StringPtrOutput `pulumi:"groupName"`
	// The name of the User to associate. Either `groupName` or `loginName` should be provided.
	LoginName pulumi.StringPtrOutput `pulumi:"loginName"`
}

// NewQualitygateUsergroupAssociation registers a new resource with the given unique name, arguments, and options.
func NewQualitygateUsergroupAssociation(ctx *pulumi.Context,
	name string, args *QualitygateUsergroupAssociationArgs, opts ...pulumi.ResourceOption) (*QualitygateUsergroupAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Gatename == nil {
		return nil, errors.New("invalid value for required argument 'Gatename'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QualitygateUsergroupAssociation
	err := ctx.RegisterResource("sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQualitygateUsergroupAssociation gets an existing QualitygateUsergroupAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQualitygateUsergroupAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QualitygateUsergroupAssociationState, opts ...pulumi.ResourceOption) (*QualitygateUsergroupAssociation, error) {
	var resource QualitygateUsergroupAssociation
	err := ctx.ReadResource("sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QualitygateUsergroupAssociation resources.
type qualitygateUsergroupAssociationState struct {
	// The name of the Quality Gate
	Gatename *string `pulumi:"gatename"`
	// The name of the Group to associate. Either `groupName` or `loginName` should be provided.
	GroupName *string `pulumi:"groupName"`
	// The name of the User to associate. Either `groupName` or `loginName` should be provided.
	LoginName *string `pulumi:"loginName"`
}

type QualitygateUsergroupAssociationState struct {
	// The name of the Quality Gate
	Gatename pulumi.StringPtrInput
	// The name of the Group to associate. Either `groupName` or `loginName` should be provided.
	GroupName pulumi.StringPtrInput
	// The name of the User to associate. Either `groupName` or `loginName` should be provided.
	LoginName pulumi.StringPtrInput
}

func (QualitygateUsergroupAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*qualitygateUsergroupAssociationState)(nil)).Elem()
}

type qualitygateUsergroupAssociationArgs struct {
	// The name of the Quality Gate
	Gatename string `pulumi:"gatename"`
	// The name of the Group to associate. Either `groupName` or `loginName` should be provided.
	GroupName *string `pulumi:"groupName"`
	// The name of the User to associate. Either `groupName` or `loginName` should be provided.
	LoginName *string `pulumi:"loginName"`
}

// The set of arguments for constructing a QualitygateUsergroupAssociation resource.
type QualitygateUsergroupAssociationArgs struct {
	// The name of the Quality Gate
	Gatename pulumi.StringInput
	// The name of the Group to associate. Either `groupName` or `loginName` should be provided.
	GroupName pulumi.StringPtrInput
	// The name of the User to associate. Either `groupName` or `loginName` should be provided.
	LoginName pulumi.StringPtrInput
}

func (QualitygateUsergroupAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qualitygateUsergroupAssociationArgs)(nil)).Elem()
}

type QualitygateUsergroupAssociationInput interface {
	pulumi.Input

	ToQualitygateUsergroupAssociationOutput() QualitygateUsergroupAssociationOutput
	ToQualitygateUsergroupAssociationOutputWithContext(ctx context.Context) QualitygateUsergroupAssociationOutput
}

func (*QualitygateUsergroupAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**QualitygateUsergroupAssociation)(nil)).Elem()
}

func (i *QualitygateUsergroupAssociation) ToQualitygateUsergroupAssociationOutput() QualitygateUsergroupAssociationOutput {
	return i.ToQualitygateUsergroupAssociationOutputWithContext(context.Background())
}

func (i *QualitygateUsergroupAssociation) ToQualitygateUsergroupAssociationOutputWithContext(ctx context.Context) QualitygateUsergroupAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualitygateUsergroupAssociationOutput)
}

// QualitygateUsergroupAssociationArrayInput is an input type that accepts QualitygateUsergroupAssociationArray and QualitygateUsergroupAssociationArrayOutput values.
// You can construct a concrete instance of `QualitygateUsergroupAssociationArrayInput` via:
//
//	QualitygateUsergroupAssociationArray{ QualitygateUsergroupAssociationArgs{...} }
type QualitygateUsergroupAssociationArrayInput interface {
	pulumi.Input

	ToQualitygateUsergroupAssociationArrayOutput() QualitygateUsergroupAssociationArrayOutput
	ToQualitygateUsergroupAssociationArrayOutputWithContext(context.Context) QualitygateUsergroupAssociationArrayOutput
}

type QualitygateUsergroupAssociationArray []QualitygateUsergroupAssociationInput

func (QualitygateUsergroupAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualitygateUsergroupAssociation)(nil)).Elem()
}

func (i QualitygateUsergroupAssociationArray) ToQualitygateUsergroupAssociationArrayOutput() QualitygateUsergroupAssociationArrayOutput {
	return i.ToQualitygateUsergroupAssociationArrayOutputWithContext(context.Background())
}

func (i QualitygateUsergroupAssociationArray) ToQualitygateUsergroupAssociationArrayOutputWithContext(ctx context.Context) QualitygateUsergroupAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualitygateUsergroupAssociationArrayOutput)
}

// QualitygateUsergroupAssociationMapInput is an input type that accepts QualitygateUsergroupAssociationMap and QualitygateUsergroupAssociationMapOutput values.
// You can construct a concrete instance of `QualitygateUsergroupAssociationMapInput` via:
//
//	QualitygateUsergroupAssociationMap{ "key": QualitygateUsergroupAssociationArgs{...} }
type QualitygateUsergroupAssociationMapInput interface {
	pulumi.Input

	ToQualitygateUsergroupAssociationMapOutput() QualitygateUsergroupAssociationMapOutput
	ToQualitygateUsergroupAssociationMapOutputWithContext(context.Context) QualitygateUsergroupAssociationMapOutput
}

type QualitygateUsergroupAssociationMap map[string]QualitygateUsergroupAssociationInput

func (QualitygateUsergroupAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualitygateUsergroupAssociation)(nil)).Elem()
}

func (i QualitygateUsergroupAssociationMap) ToQualitygateUsergroupAssociationMapOutput() QualitygateUsergroupAssociationMapOutput {
	return i.ToQualitygateUsergroupAssociationMapOutputWithContext(context.Background())
}

func (i QualitygateUsergroupAssociationMap) ToQualitygateUsergroupAssociationMapOutputWithContext(ctx context.Context) QualitygateUsergroupAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualitygateUsergroupAssociationMapOutput)
}

type QualitygateUsergroupAssociationOutput struct{ *pulumi.OutputState }

func (QualitygateUsergroupAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QualitygateUsergroupAssociation)(nil)).Elem()
}

func (o QualitygateUsergroupAssociationOutput) ToQualitygateUsergroupAssociationOutput() QualitygateUsergroupAssociationOutput {
	return o
}

func (o QualitygateUsergroupAssociationOutput) ToQualitygateUsergroupAssociationOutputWithContext(ctx context.Context) QualitygateUsergroupAssociationOutput {
	return o
}

// The name of the Quality Gate
func (o QualitygateUsergroupAssociationOutput) Gatename() pulumi.StringOutput {
	return o.ApplyT(func(v *QualitygateUsergroupAssociation) pulumi.StringOutput { return v.Gatename }).(pulumi.StringOutput)
}

// The name of the Group to associate. Either `groupName` or `loginName` should be provided.
func (o QualitygateUsergroupAssociationOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QualitygateUsergroupAssociation) pulumi.StringPtrOutput { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The name of the User to associate. Either `groupName` or `loginName` should be provided.
func (o QualitygateUsergroupAssociationOutput) LoginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QualitygateUsergroupAssociation) pulumi.StringPtrOutput { return v.LoginName }).(pulumi.StringPtrOutput)
}

type QualitygateUsergroupAssociationArrayOutput struct{ *pulumi.OutputState }

func (QualitygateUsergroupAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualitygateUsergroupAssociation)(nil)).Elem()
}

func (o QualitygateUsergroupAssociationArrayOutput) ToQualitygateUsergroupAssociationArrayOutput() QualitygateUsergroupAssociationArrayOutput {
	return o
}

func (o QualitygateUsergroupAssociationArrayOutput) ToQualitygateUsergroupAssociationArrayOutputWithContext(ctx context.Context) QualitygateUsergroupAssociationArrayOutput {
	return o
}

func (o QualitygateUsergroupAssociationArrayOutput) Index(i pulumi.IntInput) QualitygateUsergroupAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QualitygateUsergroupAssociation {
		return vs[0].([]*QualitygateUsergroupAssociation)[vs[1].(int)]
	}).(QualitygateUsergroupAssociationOutput)
}

type QualitygateUsergroupAssociationMapOutput struct{ *pulumi.OutputState }

func (QualitygateUsergroupAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualitygateUsergroupAssociation)(nil)).Elem()
}

func (o QualitygateUsergroupAssociationMapOutput) ToQualitygateUsergroupAssociationMapOutput() QualitygateUsergroupAssociationMapOutput {
	return o
}

func (o QualitygateUsergroupAssociationMapOutput) ToQualitygateUsergroupAssociationMapOutputWithContext(ctx context.Context) QualitygateUsergroupAssociationMapOutput {
	return o
}

func (o QualitygateUsergroupAssociationMapOutput) MapIndex(k pulumi.StringInput) QualitygateUsergroupAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QualitygateUsergroupAssociation {
		return vs[0].(map[string]*QualitygateUsergroupAssociation)[vs[1].(string)]
	}).(QualitygateUsergroupAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QualitygateUsergroupAssociationInput)(nil)).Elem(), &QualitygateUsergroupAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualitygateUsergroupAssociationArrayInput)(nil)).Elem(), QualitygateUsergroupAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualitygateUsergroupAssociationMapInput)(nil)).Elem(), QualitygateUsergroupAssociationMap{})
	pulumi.RegisterOutputType(QualitygateUsergroupAssociationOutput{})
	pulumi.RegisterOutputType(QualitygateUsergroupAssociationArrayOutput{})
	pulumi.RegisterOutputType(QualitygateUsergroupAssociationMapOutput{})
}
