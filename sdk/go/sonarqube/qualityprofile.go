// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube/internal"
)

// ## # Qualityprofile
//
// Provides a Sonarqube Quality Profile resource. This can be used to create and manage Sonarqube Quality Profiles.
//
// ## Example: create a quality profile
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sonarqube.NewQualityprofile(ctx, "main", &sonarqube.QualityprofileArgs{
//				IsDefault: pulumi.Bool(false),
//				Language:  pulumi.String("js"),
//				Parent:    pulumi.String("sonar way"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// # Quality Profiles can be imported using their ID
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type Qualityprofile struct {
	pulumi.CustomResourceState

	// Is the default profile
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// Quality profile key
	Key pulumi.StringOutput `pulumi:"key"`
	// Quality profile language
	Language pulumi.StringOutput `pulumi:"language"`
	// Quality profile name
	Name   pulumi.StringOutput    `pulumi:"name"`
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
}

// NewQualityprofile registers a new resource with the given unique name, arguments, and options.
func NewQualityprofile(ctx *pulumi.Context,
	name string, args *QualityprofileArgs, opts ...pulumi.ResourceOption) (*Qualityprofile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Language == nil {
		return nil, errors.New("invalid value for required argument 'Language'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Qualityprofile
	err := ctx.RegisterResource("sonarqube:index/qualityprofile:Qualityprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQualityprofile gets an existing Qualityprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQualityprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QualityprofileState, opts ...pulumi.ResourceOption) (*Qualityprofile, error) {
	var resource Qualityprofile
	err := ctx.ReadResource("sonarqube:index/qualityprofile:Qualityprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Qualityprofile resources.
type qualityprofileState struct {
	// Is the default profile
	IsDefault *bool `pulumi:"isDefault"`
	// Quality profile key
	Key *string `pulumi:"key"`
	// Quality profile language
	Language *string `pulumi:"language"`
	// Quality profile name
	Name   *string `pulumi:"name"`
	Parent *string `pulumi:"parent"`
}

type QualityprofileState struct {
	// Is the default profile
	IsDefault pulumi.BoolPtrInput
	// Quality profile key
	Key pulumi.StringPtrInput
	// Quality profile language
	Language pulumi.StringPtrInput
	// Quality profile name
	Name   pulumi.StringPtrInput
	Parent pulumi.StringPtrInput
}

func (QualityprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityprofileState)(nil)).Elem()
}

type qualityprofileArgs struct {
	// Is the default profile
	IsDefault *bool `pulumi:"isDefault"`
	// Quality profile language
	Language string `pulumi:"language"`
	// Quality profile name
	Name   *string `pulumi:"name"`
	Parent *string `pulumi:"parent"`
}

// The set of arguments for constructing a Qualityprofile resource.
type QualityprofileArgs struct {
	// Is the default profile
	IsDefault pulumi.BoolPtrInput
	// Quality profile language
	Language pulumi.StringInput
	// Quality profile name
	Name   pulumi.StringPtrInput
	Parent pulumi.StringPtrInput
}

func (QualityprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityprofileArgs)(nil)).Elem()
}

type QualityprofileInput interface {
	pulumi.Input

	ToQualityprofileOutput() QualityprofileOutput
	ToQualityprofileOutputWithContext(ctx context.Context) QualityprofileOutput
}

func (*Qualityprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**Qualityprofile)(nil)).Elem()
}

func (i *Qualityprofile) ToQualityprofileOutput() QualityprofileOutput {
	return i.ToQualityprofileOutputWithContext(context.Background())
}

func (i *Qualityprofile) ToQualityprofileOutputWithContext(ctx context.Context) QualityprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityprofileOutput)
}

// QualityprofileArrayInput is an input type that accepts QualityprofileArray and QualityprofileArrayOutput values.
// You can construct a concrete instance of `QualityprofileArrayInput` via:
//
//	QualityprofileArray{ QualityprofileArgs{...} }
type QualityprofileArrayInput interface {
	pulumi.Input

	ToQualityprofileArrayOutput() QualityprofileArrayOutput
	ToQualityprofileArrayOutputWithContext(context.Context) QualityprofileArrayOutput
}

type QualityprofileArray []QualityprofileInput

func (QualityprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Qualityprofile)(nil)).Elem()
}

func (i QualityprofileArray) ToQualityprofileArrayOutput() QualityprofileArrayOutput {
	return i.ToQualityprofileArrayOutputWithContext(context.Background())
}

func (i QualityprofileArray) ToQualityprofileArrayOutputWithContext(ctx context.Context) QualityprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityprofileArrayOutput)
}

// QualityprofileMapInput is an input type that accepts QualityprofileMap and QualityprofileMapOutput values.
// You can construct a concrete instance of `QualityprofileMapInput` via:
//
//	QualityprofileMap{ "key": QualityprofileArgs{...} }
type QualityprofileMapInput interface {
	pulumi.Input

	ToQualityprofileMapOutput() QualityprofileMapOutput
	ToQualityprofileMapOutputWithContext(context.Context) QualityprofileMapOutput
}

type QualityprofileMap map[string]QualityprofileInput

func (QualityprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Qualityprofile)(nil)).Elem()
}

func (i QualityprofileMap) ToQualityprofileMapOutput() QualityprofileMapOutput {
	return i.ToQualityprofileMapOutputWithContext(context.Background())
}

func (i QualityprofileMap) ToQualityprofileMapOutputWithContext(ctx context.Context) QualityprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityprofileMapOutput)
}

type QualityprofileOutput struct{ *pulumi.OutputState }

func (QualityprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Qualityprofile)(nil)).Elem()
}

func (o QualityprofileOutput) ToQualityprofileOutput() QualityprofileOutput {
	return o
}

func (o QualityprofileOutput) ToQualityprofileOutputWithContext(ctx context.Context) QualityprofileOutput {
	return o
}

// Is the default profile
func (o QualityprofileOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Qualityprofile) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// Quality profile key
func (o QualityprofileOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Qualityprofile) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Quality profile language
func (o QualityprofileOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v *Qualityprofile) pulumi.StringOutput { return v.Language }).(pulumi.StringOutput)
}

// Quality profile name
func (o QualityprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Qualityprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QualityprofileOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qualityprofile) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

type QualityprofileArrayOutput struct{ *pulumi.OutputState }

func (QualityprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Qualityprofile)(nil)).Elem()
}

func (o QualityprofileArrayOutput) ToQualityprofileArrayOutput() QualityprofileArrayOutput {
	return o
}

func (o QualityprofileArrayOutput) ToQualityprofileArrayOutputWithContext(ctx context.Context) QualityprofileArrayOutput {
	return o
}

func (o QualityprofileArrayOutput) Index(i pulumi.IntInput) QualityprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Qualityprofile {
		return vs[0].([]*Qualityprofile)[vs[1].(int)]
	}).(QualityprofileOutput)
}

type QualityprofileMapOutput struct{ *pulumi.OutputState }

func (QualityprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Qualityprofile)(nil)).Elem()
}

func (o QualityprofileMapOutput) ToQualityprofileMapOutput() QualityprofileMapOutput {
	return o
}

func (o QualityprofileMapOutput) ToQualityprofileMapOutputWithContext(ctx context.Context) QualityprofileMapOutput {
	return o
}

func (o QualityprofileMapOutput) MapIndex(k pulumi.StringInput) QualityprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Qualityprofile {
		return vs[0].(map[string]*Qualityprofile)[vs[1].(string)]
	}).(QualityprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QualityprofileInput)(nil)).Elem(), &Qualityprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityprofileArrayInput)(nil)).Elem(), QualityprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityprofileMapInput)(nil)).Elem(), QualityprofileMap{})
	pulumi.RegisterOutputType(QualityprofileOutput{})
	pulumi.RegisterOutputType(QualityprofileArrayOutput{})
	pulumi.RegisterOutputType(QualityprofileMapOutput{})
}
