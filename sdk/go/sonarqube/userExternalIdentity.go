// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube/internal"
)

// ## # sonarqubeUserExternalEntity
//
// Updates the *external identity* of a *non local* Sonarqube User. This can be used to set the *Identity Provider* which should be used to
// authenticate a specific user.
//
// The Sonarqube API currently does not provide an endpoint to read the *external identity* setting of an user.
//
// ## Example: change the external identity to SAML
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/saggafarsyad/pulumi-sonarqube/sdk/go/sonarqube"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			remoteUserUser, err := sonarqube.NewUser(ctx, "remoteUserUser", &sonarqube.UserArgs{
//				LoginName: pulumi.String("terraform-test"),
//				Email:     pulumi.String("terraform-test@sonarqube.com"),
//				IsLocal:   pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sonarqube.NewUserExternalIdentity(ctx, "remoteUserUserExternalIdentity", &sonarqube.UserExternalIdentityArgs{
//				LoginName:        remoteUserUser.LoginName,
//				ExternalIdentity: pulumi.String("terraform-test@sonarqube.com"),
//				ExternalProvider: pulumi.String("saml"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type UserExternalIdentity struct {
	pulumi.CustomResourceState

	// The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be
	// created.
	ExternalIdentity pulumi.StringOutput `pulumi:"externalIdentity"`
	// The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing
	// this forces a new resource to be created.
	ExternalProvider pulumi.StringOutput `pulumi:"externalProvider"`
	// The login name of the User to update. Changing this forces a new resource to be created.
	LoginName pulumi.StringOutput `pulumi:"loginName"`
}

// NewUserExternalIdentity registers a new resource with the given unique name, arguments, and options.
func NewUserExternalIdentity(ctx *pulumi.Context,
	name string, args *UserExternalIdentityArgs, opts ...pulumi.ResourceOption) (*UserExternalIdentity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalIdentity == nil {
		return nil, errors.New("invalid value for required argument 'ExternalIdentity'")
	}
	if args.ExternalProvider == nil {
		return nil, errors.New("invalid value for required argument 'ExternalProvider'")
	}
	if args.LoginName == nil {
		return nil, errors.New("invalid value for required argument 'LoginName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserExternalIdentity
	err := ctx.RegisterResource("sonarqube:index/userExternalIdentity:UserExternalIdentity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserExternalIdentity gets an existing UserExternalIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserExternalIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserExternalIdentityState, opts ...pulumi.ResourceOption) (*UserExternalIdentity, error) {
	var resource UserExternalIdentity
	err := ctx.ReadResource("sonarqube:index/userExternalIdentity:UserExternalIdentity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserExternalIdentity resources.
type userExternalIdentityState struct {
	// The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be
	// created.
	ExternalIdentity *string `pulumi:"externalIdentity"`
	// The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing
	// this forces a new resource to be created.
	ExternalProvider *string `pulumi:"externalProvider"`
	// The login name of the User to update. Changing this forces a new resource to be created.
	LoginName *string `pulumi:"loginName"`
}

type UserExternalIdentityState struct {
	// The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be
	// created.
	ExternalIdentity pulumi.StringPtrInput
	// The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing
	// this forces a new resource to be created.
	ExternalProvider pulumi.StringPtrInput
	// The login name of the User to update. Changing this forces a new resource to be created.
	LoginName pulumi.StringPtrInput
}

func (UserExternalIdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*userExternalIdentityState)(nil)).Elem()
}

type userExternalIdentityArgs struct {
	// The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be
	// created.
	ExternalIdentity string `pulumi:"externalIdentity"`
	// The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing
	// this forces a new resource to be created.
	ExternalProvider string `pulumi:"externalProvider"`
	// The login name of the User to update. Changing this forces a new resource to be created.
	LoginName string `pulumi:"loginName"`
}

// The set of arguments for constructing a UserExternalIdentity resource.
type UserExternalIdentityArgs struct {
	// The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be
	// created.
	ExternalIdentity pulumi.StringInput
	// The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing
	// this forces a new resource to be created.
	ExternalProvider pulumi.StringInput
	// The login name of the User to update. Changing this forces a new resource to be created.
	LoginName pulumi.StringInput
}

func (UserExternalIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userExternalIdentityArgs)(nil)).Elem()
}

type UserExternalIdentityInput interface {
	pulumi.Input

	ToUserExternalIdentityOutput() UserExternalIdentityOutput
	ToUserExternalIdentityOutputWithContext(ctx context.Context) UserExternalIdentityOutput
}

func (*UserExternalIdentity) ElementType() reflect.Type {
	return reflect.TypeOf((**UserExternalIdentity)(nil)).Elem()
}

func (i *UserExternalIdentity) ToUserExternalIdentityOutput() UserExternalIdentityOutput {
	return i.ToUserExternalIdentityOutputWithContext(context.Background())
}

func (i *UserExternalIdentity) ToUserExternalIdentityOutputWithContext(ctx context.Context) UserExternalIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExternalIdentityOutput)
}

// UserExternalIdentityArrayInput is an input type that accepts UserExternalIdentityArray and UserExternalIdentityArrayOutput values.
// You can construct a concrete instance of `UserExternalIdentityArrayInput` via:
//
//	UserExternalIdentityArray{ UserExternalIdentityArgs{...} }
type UserExternalIdentityArrayInput interface {
	pulumi.Input

	ToUserExternalIdentityArrayOutput() UserExternalIdentityArrayOutput
	ToUserExternalIdentityArrayOutputWithContext(context.Context) UserExternalIdentityArrayOutput
}

type UserExternalIdentityArray []UserExternalIdentityInput

func (UserExternalIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserExternalIdentity)(nil)).Elem()
}

func (i UserExternalIdentityArray) ToUserExternalIdentityArrayOutput() UserExternalIdentityArrayOutput {
	return i.ToUserExternalIdentityArrayOutputWithContext(context.Background())
}

func (i UserExternalIdentityArray) ToUserExternalIdentityArrayOutputWithContext(ctx context.Context) UserExternalIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExternalIdentityArrayOutput)
}

// UserExternalIdentityMapInput is an input type that accepts UserExternalIdentityMap and UserExternalIdentityMapOutput values.
// You can construct a concrete instance of `UserExternalIdentityMapInput` via:
//
//	UserExternalIdentityMap{ "key": UserExternalIdentityArgs{...} }
type UserExternalIdentityMapInput interface {
	pulumi.Input

	ToUserExternalIdentityMapOutput() UserExternalIdentityMapOutput
	ToUserExternalIdentityMapOutputWithContext(context.Context) UserExternalIdentityMapOutput
}

type UserExternalIdentityMap map[string]UserExternalIdentityInput

func (UserExternalIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserExternalIdentity)(nil)).Elem()
}

func (i UserExternalIdentityMap) ToUserExternalIdentityMapOutput() UserExternalIdentityMapOutput {
	return i.ToUserExternalIdentityMapOutputWithContext(context.Background())
}

func (i UserExternalIdentityMap) ToUserExternalIdentityMapOutputWithContext(ctx context.Context) UserExternalIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExternalIdentityMapOutput)
}

type UserExternalIdentityOutput struct{ *pulumi.OutputState }

func (UserExternalIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserExternalIdentity)(nil)).Elem()
}

func (o UserExternalIdentityOutput) ToUserExternalIdentityOutput() UserExternalIdentityOutput {
	return o
}

func (o UserExternalIdentityOutput) ToUserExternalIdentityOutputWithContext(ctx context.Context) UserExternalIdentityOutput {
	return o
}

// The identifier of the User used by the Authentication Provider. Changing this forces a new resource to be
// created.
func (o UserExternalIdentityOutput) ExternalIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *UserExternalIdentity) pulumi.StringOutput { return v.ExternalIdentity }).(pulumi.StringOutput)
}

// The key of the Authentication Provider. The Authentication Provider must be activated on Sonarqube. Changing
// this forces a new resource to be created.
func (o UserExternalIdentityOutput) ExternalProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *UserExternalIdentity) pulumi.StringOutput { return v.ExternalProvider }).(pulumi.StringOutput)
}

// The login name of the User to update. Changing this forces a new resource to be created.
func (o UserExternalIdentityOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserExternalIdentity) pulumi.StringOutput { return v.LoginName }).(pulumi.StringOutput)
}

type UserExternalIdentityArrayOutput struct{ *pulumi.OutputState }

func (UserExternalIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserExternalIdentity)(nil)).Elem()
}

func (o UserExternalIdentityArrayOutput) ToUserExternalIdentityArrayOutput() UserExternalIdentityArrayOutput {
	return o
}

func (o UserExternalIdentityArrayOutput) ToUserExternalIdentityArrayOutputWithContext(ctx context.Context) UserExternalIdentityArrayOutput {
	return o
}

func (o UserExternalIdentityArrayOutput) Index(i pulumi.IntInput) UserExternalIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserExternalIdentity {
		return vs[0].([]*UserExternalIdentity)[vs[1].(int)]
	}).(UserExternalIdentityOutput)
}

type UserExternalIdentityMapOutput struct{ *pulumi.OutputState }

func (UserExternalIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserExternalIdentity)(nil)).Elem()
}

func (o UserExternalIdentityMapOutput) ToUserExternalIdentityMapOutput() UserExternalIdentityMapOutput {
	return o
}

func (o UserExternalIdentityMapOutput) ToUserExternalIdentityMapOutputWithContext(ctx context.Context) UserExternalIdentityMapOutput {
	return o
}

func (o UserExternalIdentityMapOutput) MapIndex(k pulumi.StringInput) UserExternalIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserExternalIdentity {
		return vs[0].(map[string]*UserExternalIdentity)[vs[1].(string)]
	}).(UserExternalIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserExternalIdentityInput)(nil)).Elem(), &UserExternalIdentity{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExternalIdentityArrayInput)(nil)).Elem(), UserExternalIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExternalIdentityMapInput)(nil)).Elem(), UserExternalIdentityMap{})
	pulumi.RegisterOutputType(UserExternalIdentityOutput{})
	pulumi.RegisterOutputType(UserExternalIdentityArrayOutput{})
	pulumi.RegisterOutputType(UserExternalIdentityMapOutput{})
}
