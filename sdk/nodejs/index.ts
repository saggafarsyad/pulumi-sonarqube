// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlmAzureArgs, AlmAzureState } from "./almAzure";
export type AlmAzure = import("./almAzure").AlmAzure;
export const AlmAzure: typeof import("./almAzure").AlmAzure = null as any;
utilities.lazyLoad(exports, ["AlmAzure"], () => require("./almAzure"));

export { AlmGithubArgs, AlmGithubState } from "./almGithub";
export type AlmGithub = import("./almGithub").AlmGithub;
export const AlmGithub: typeof import("./almGithub").AlmGithub = null as any;
utilities.lazyLoad(exports, ["AlmGithub"], () => require("./almGithub"));

export { AlmGitlabArgs, AlmGitlabState } from "./almGitlab";
export type AlmGitlab = import("./almGitlab").AlmGitlab;
export const AlmGitlab: typeof import("./almGitlab").AlmGitlab = null as any;
utilities.lazyLoad(exports, ["AlmGitlab"], () => require("./almGitlab"));

export { AzureBindingArgs, AzureBindingState } from "./azureBinding";
export type AzureBinding = import("./azureBinding").AzureBinding;
export const AzureBinding: typeof import("./azureBinding").AzureBinding = null as any;
utilities.lazyLoad(exports, ["AzureBinding"], () => require("./azureBinding"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetPortfolioArgs, GetPortfolioResult, GetPortfolioOutputArgs } from "./getPortfolio";
export const getPortfolio: typeof import("./getPortfolio").getPortfolio = null as any;
export const getPortfolioOutput: typeof import("./getPortfolio").getPortfolioOutput = null as any;
utilities.lazyLoad(exports, ["getPortfolio","getPortfolioOutput"], () => require("./getPortfolio"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetQualitygateArgs, GetQualitygateResult, GetQualitygateOutputArgs } from "./getQualitygate";
export const getQualitygate: typeof import("./getQualitygate").getQualitygate = null as any;
export const getQualitygateOutput: typeof import("./getQualitygate").getQualitygateOutput = null as any;
utilities.lazyLoad(exports, ["getQualitygate","getQualitygateOutput"], () => require("./getQualitygate"));

export { GetQualityprofileArgs, GetQualityprofileResult, GetQualityprofileOutputArgs } from "./getQualityprofile";
export const getQualityprofile: typeof import("./getQualityprofile").getQualityprofile = null as any;
export const getQualityprofileOutput: typeof import("./getQualityprofile").getQualityprofileOutput = null as any;
utilities.lazyLoad(exports, ["getQualityprofile","getQualityprofileOutput"], () => require("./getQualityprofile"));

export { GetRuleArgs, GetRuleResult, GetRuleOutputArgs } from "./getRule";
export const getRule: typeof import("./getRule").getRule = null as any;
export const getRuleOutput: typeof import("./getRule").getRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRule","getRuleOutput"], () => require("./getRule"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GithubBindingArgs, GithubBindingState } from "./githubBinding";
export type GithubBinding = import("./githubBinding").GithubBinding;
export const GithubBinding: typeof import("./githubBinding").GithubBinding = null as any;
utilities.lazyLoad(exports, ["GithubBinding"], () => require("./githubBinding"));

export { GitlabBindingArgs, GitlabBindingState } from "./gitlabBinding";
export type GitlabBinding = import("./gitlabBinding").GitlabBinding;
export const GitlabBinding: typeof import("./gitlabBinding").GitlabBinding = null as any;
utilities.lazyLoad(exports, ["GitlabBinding"], () => require("./gitlabBinding"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMemberArgs, GroupMemberState } from "./groupMember";
export type GroupMember = import("./groupMember").GroupMember;
export const GroupMember: typeof import("./groupMember").GroupMember = null as any;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));

export { NewCodePeriodsArgs, NewCodePeriodsState } from "./newCodePeriods";
export type NewCodePeriods = import("./newCodePeriods").NewCodePeriods;
export const NewCodePeriods: typeof import("./newCodePeriods").NewCodePeriods = null as any;
utilities.lazyLoad(exports, ["NewCodePeriods"], () => require("./newCodePeriods"));

export { PermissionTemplateArgs, PermissionTemplateState } from "./permissionTemplate";
export type PermissionTemplate = import("./permissionTemplate").PermissionTemplate;
export const PermissionTemplate: typeof import("./permissionTemplate").PermissionTemplate = null as any;
utilities.lazyLoad(exports, ["PermissionTemplate"], () => require("./permissionTemplate"));

export { PermissionsArgs, PermissionsState } from "./permissions";
export type Permissions = import("./permissions").Permissions;
export const Permissions: typeof import("./permissions").Permissions = null as any;
utilities.lazyLoad(exports, ["Permissions"], () => require("./permissions"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { PortfolioArgs, PortfolioState } from "./portfolio";
export type Portfolio = import("./portfolio").Portfolio;
export const Portfolio: typeof import("./portfolio").Portfolio = null as any;
utilities.lazyLoad(exports, ["Portfolio"], () => require("./portfolio"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectMainBranchArgs, ProjectMainBranchState } from "./projectMainBranch";
export type ProjectMainBranch = import("./projectMainBranch").ProjectMainBranch;
export const ProjectMainBranch: typeof import("./projectMainBranch").ProjectMainBranch = null as any;
utilities.lazyLoad(exports, ["ProjectMainBranch"], () => require("./projectMainBranch"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QualitygateArgs, QualitygateState } from "./qualitygate";
export type Qualitygate = import("./qualitygate").Qualitygate;
export const Qualitygate: typeof import("./qualitygate").Qualitygate = null as any;
utilities.lazyLoad(exports, ["Qualitygate"], () => require("./qualitygate"));

export { QualitygateProjectAssociationArgs, QualitygateProjectAssociationState } from "./qualitygateProjectAssociation";
export type QualitygateProjectAssociation = import("./qualitygateProjectAssociation").QualitygateProjectAssociation;
export const QualitygateProjectAssociation: typeof import("./qualitygateProjectAssociation").QualitygateProjectAssociation = null as any;
utilities.lazyLoad(exports, ["QualitygateProjectAssociation"], () => require("./qualitygateProjectAssociation"));

export { QualitygateUsergroupAssociationArgs, QualitygateUsergroupAssociationState } from "./qualitygateUsergroupAssociation";
export type QualitygateUsergroupAssociation = import("./qualitygateUsergroupAssociation").QualitygateUsergroupAssociation;
export const QualitygateUsergroupAssociation: typeof import("./qualitygateUsergroupAssociation").QualitygateUsergroupAssociation = null as any;
utilities.lazyLoad(exports, ["QualitygateUsergroupAssociation"], () => require("./qualitygateUsergroupAssociation"));

export { QualityprofileArgs, QualityprofileState } from "./qualityprofile";
export type Qualityprofile = import("./qualityprofile").Qualityprofile;
export const Qualityprofile: typeof import("./qualityprofile").Qualityprofile = null as any;
utilities.lazyLoad(exports, ["Qualityprofile"], () => require("./qualityprofile"));

export { QualityprofileActivateRuleArgs, QualityprofileActivateRuleState } from "./qualityprofileActivateRule";
export type QualityprofileActivateRule = import("./qualityprofileActivateRule").QualityprofileActivateRule;
export const QualityprofileActivateRule: typeof import("./qualityprofileActivateRule").QualityprofileActivateRule = null as any;
utilities.lazyLoad(exports, ["QualityprofileActivateRule"], () => require("./qualityprofileActivateRule"));

export { QualityprofileProjectAssociationArgs, QualityprofileProjectAssociationState } from "./qualityprofileProjectAssociation";
export type QualityprofileProjectAssociation = import("./qualityprofileProjectAssociation").QualityprofileProjectAssociation;
export const QualityprofileProjectAssociation: typeof import("./qualityprofileProjectAssociation").QualityprofileProjectAssociation = null as any;
utilities.lazyLoad(exports, ["QualityprofileProjectAssociation"], () => require("./qualityprofileProjectAssociation"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserExternalIdentityArgs, UserExternalIdentityState } from "./userExternalIdentity";
export type UserExternalIdentity = import("./userExternalIdentity").UserExternalIdentity;
export const UserExternalIdentity: typeof import("./userExternalIdentity").UserExternalIdentity = null as any;
utilities.lazyLoad(exports, ["UserExternalIdentity"], () => require("./userExternalIdentity"));

export { UserTokenArgs, UserTokenState } from "./userToken";
export type UserToken = import("./userToken").UserToken;
export const UserToken: typeof import("./userToken").UserToken = null as any;
utilities.lazyLoad(exports, ["UserToken"], () => require("./userToken"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sonarqube:index/almAzure:AlmAzure":
                return new AlmAzure(name, <any>undefined, { urn })
            case "sonarqube:index/almGithub:AlmGithub":
                return new AlmGithub(name, <any>undefined, { urn })
            case "sonarqube:index/almGitlab:AlmGitlab":
                return new AlmGitlab(name, <any>undefined, { urn })
            case "sonarqube:index/azureBinding:AzureBinding":
                return new AzureBinding(name, <any>undefined, { urn })
            case "sonarqube:index/githubBinding:GithubBinding":
                return new GithubBinding(name, <any>undefined, { urn })
            case "sonarqube:index/gitlabBinding:GitlabBinding":
                return new GitlabBinding(name, <any>undefined, { urn })
            case "sonarqube:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "sonarqube:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "sonarqube:index/newCodePeriods:NewCodePeriods":
                return new NewCodePeriods(name, <any>undefined, { urn })
            case "sonarqube:index/permissionTemplate:PermissionTemplate":
                return new PermissionTemplate(name, <any>undefined, { urn })
            case "sonarqube:index/permissions:Permissions":
                return new Permissions(name, <any>undefined, { urn })
            case "sonarqube:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "sonarqube:index/portfolio:Portfolio":
                return new Portfolio(name, <any>undefined, { urn })
            case "sonarqube:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "sonarqube:index/projectMainBranch:ProjectMainBranch":
                return new ProjectMainBranch(name, <any>undefined, { urn })
            case "sonarqube:index/qualitygate:Qualitygate":
                return new Qualitygate(name, <any>undefined, { urn })
            case "sonarqube:index/qualitygateProjectAssociation:QualitygateProjectAssociation":
                return new QualitygateProjectAssociation(name, <any>undefined, { urn })
            case "sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation":
                return new QualitygateUsergroupAssociation(name, <any>undefined, { urn })
            case "sonarqube:index/qualityprofile:Qualityprofile":
                return new Qualityprofile(name, <any>undefined, { urn })
            case "sonarqube:index/qualityprofileActivateRule:QualityprofileActivateRule":
                return new QualityprofileActivateRule(name, <any>undefined, { urn })
            case "sonarqube:index/qualityprofileProjectAssociation:QualityprofileProjectAssociation":
                return new QualityprofileProjectAssociation(name, <any>undefined, { urn })
            case "sonarqube:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "sonarqube:index/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "sonarqube:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "sonarqube:index/userExternalIdentity:UserExternalIdentity":
                return new UserExternalIdentity(name, <any>undefined, { urn })
            case "sonarqube:index/userToken:UserToken":
                return new UserToken(name, <any>undefined, { urn })
            case "sonarqube:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sonarqube", "index/almAzure", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/almGithub", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/almGitlab", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/azureBinding", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/githubBinding", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/gitlabBinding", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/group", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/newCodePeriods", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/permissionTemplate", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/permissions", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/plugin", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/portfolio", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/project", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/projectMainBranch", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualitygate", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualitygateProjectAssociation", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualitygateUsergroupAssociation", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityprofile", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityprofileActivateRule", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityprofileProjectAssociation", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/rule", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/setting", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/user", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/userExternalIdentity", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/userToken", _module)
pulumi.runtime.registerResourceModule("sonarqube", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("sonarqube", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sonarqube") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
