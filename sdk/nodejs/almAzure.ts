// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # sonarqube.AlmAzure
 *
 * Provides a Sonarqube Azure Devops Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops
 * Platform Integration for Azure Devops.
 *
 * ## Example: Create an Azure Devops Alm Integration
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const az1 = new sonarqube.AlmAzure("az1", {
 *     key: "az1",
 *     personalAccessToken: "my_pat",
 *     url: "https://dev.azure.com/my-org",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Resource can be imported providing their Alm Instance Key and Azure DevOps Personal Access Token
 *
 * terraform
 *
 * ```sh
 * $ pulumi import sonarqube:index/almAzure:AlmAzure az1 key/personal_access_token
 * ```
 */
export class AlmAzure extends pulumi.CustomResource {
    /**
     * Get an existing AlmAzure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlmAzureState, opts?: pulumi.CustomResourceOptions): AlmAzure {
        return new AlmAzure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarqube:index/almAzure:AlmAzure';

    /**
     * Returns true if the given object is an instance of AlmAzure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlmAzure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlmAzure.__pulumiType;
    }

    /**
     * Unique key of the Azure Devops instance setting
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Azure Devops personal access token
     */
    public readonly personalAccessToken!: pulumi.Output<string>;
    /**
     * Azure API URL
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a AlmAzure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlmAzureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlmAzureArgs | AlmAzureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlmAzureState | undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["personalAccessToken"] = state ? state.personalAccessToken : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as AlmAzureArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.personalAccessToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'personalAccessToken'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["personalAccessToken"] = args?.personalAccessToken ? pulumi.secret(args.personalAccessToken) : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["personalAccessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AlmAzure.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlmAzure resources.
 */
export interface AlmAzureState {
    /**
     * Unique key of the Azure Devops instance setting
     */
    key?: pulumi.Input<string>;
    /**
     * Azure Devops personal access token
     */
    personalAccessToken?: pulumi.Input<string>;
    /**
     * Azure API URL
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlmAzure resource.
 */
export interface AlmAzureArgs {
    /**
     * Unique key of the Azure Devops instance setting
     */
    key: pulumi.Input<string>;
    /**
     * Azure Devops personal access token
     */
    personalAccessToken: pulumi.Input<string>;
    /**
     * Azure API URL
     */
    url: pulumi.Input<string>;
}
