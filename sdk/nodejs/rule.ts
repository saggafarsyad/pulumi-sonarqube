// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarqube:index/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * Key of the custom rule
     */
    public readonly customKey!: pulumi.Output<string>;
    /**
     * Rule description
     */
    public readonly markdownDescription!: pulumi.Output<string>;
    /**
     * Rule name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
     */
    public readonly params!: pulumi.Output<string | undefined>;
    /**
     * If set to true and if the rule has been deactivated (status 'REMOVED'), a status 409 will be returned
     */
    public readonly preventReactivation!: pulumi.Output<string | undefined>;
    /**
     * Rule severity
     */
    public readonly severity!: pulumi.Output<string | undefined>;
    /**
     * Rule status
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Key of the template rule in order to create a custom rule (mandatory for custom rule)
     */
    public readonly templateKey!: pulumi.Output<string>;
    /**
     * Rule type
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["customKey"] = state ? state.customKey : undefined;
            resourceInputs["markdownDescription"] = state ? state.markdownDescription : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["preventReactivation"] = state ? state.preventReactivation : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["templateKey"] = state ? state.templateKey : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.customKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customKey'");
            }
            if ((!args || args.markdownDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'markdownDescription'");
            }
            if ((!args || args.templateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateKey'");
            }
            resourceInputs["customKey"] = args ? args.customKey : undefined;
            resourceInputs["markdownDescription"] = args ? args.markdownDescription : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["preventReactivation"] = args ? args.preventReactivation : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["templateKey"] = args ? args.templateKey : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * Key of the custom rule
     */
    customKey?: pulumi.Input<string>;
    /**
     * Rule description
     */
    markdownDescription?: pulumi.Input<string>;
    /**
     * Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
     */
    params?: pulumi.Input<string>;
    /**
     * If set to true and if the rule has been deactivated (status 'REMOVED'), a status 409 will be returned
     */
    preventReactivation?: pulumi.Input<string>;
    /**
     * Rule severity
     */
    severity?: pulumi.Input<string>;
    /**
     * Rule status
     */
    status?: pulumi.Input<string>;
    /**
     * Key of the template rule in order to create a custom rule (mandatory for custom rule)
     */
    templateKey?: pulumi.Input<string>;
    /**
     * Rule type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * Key of the custom rule
     */
    customKey: pulumi.Input<string>;
    /**
     * Rule description
     */
    markdownDescription: pulumi.Input<string>;
    /**
     * Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
     */
    params?: pulumi.Input<string>;
    /**
     * If set to true and if the rule has been deactivated (status 'REMOVED'), a status 409 will be returned
     */
    preventReactivation?: pulumi.Input<string>;
    /**
     * Rule severity
     */
    severity?: pulumi.Input<string>;
    /**
     * Rule status
     */
    status?: pulumi.Input<string>;
    /**
     * Key of the template rule in order to create a custom rule (mandatory for custom rule)
     */
    templateKey: pulumi.Input<string>;
    /**
     * Rule type
     */
    type?: pulumi.Input<string>;
}
