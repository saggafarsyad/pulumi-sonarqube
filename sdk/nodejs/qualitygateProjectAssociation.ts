// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # sonarqube.QualitygateProjectAssociation
 *
 * Provides a Sonarqube Quality Gate Project association resource. This can be used to associate a Quality Gate to a Project
 *
 * ## Example: create a quality gate project association
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const mainQualitygate = new sonarqube.Qualitygate("mainQualitygate", {conditions: [{
 *     metric: "new_coverage",
 *     op: "LT",
 *     threshold: "30",
 * }]});
 * const mainProject = new sonarqube.Project("mainProject", {
 *     project: "my_project",
 *     visibility: "public",
 * });
 * const mainQualitygateProjectAssociation = new sonarqube.QualitygateProjectAssociation("mainQualitygateProjectAssociation", {
 *     gatename: mainQualitygate.id,
 *     projectkey: mainProject.project,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class QualitygateProjectAssociation extends pulumi.CustomResource {
    /**
     * Get an existing QualitygateProjectAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QualitygateProjectAssociationState, opts?: pulumi.CustomResourceOptions): QualitygateProjectAssociation {
        return new QualitygateProjectAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarqube:index/qualitygateProjectAssociation:QualitygateProjectAssociation';

    /**
     * Returns true if the given object is an instance of QualitygateProjectAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QualitygateProjectAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QualitygateProjectAssociation.__pulumiType;
    }

    public readonly gateid!: pulumi.Output<string | undefined>;
    public readonly gatename!: pulumi.Output<string | undefined>;
    public readonly projectkey!: pulumi.Output<string>;

    /**
     * Create a QualitygateProjectAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QualitygateProjectAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QualitygateProjectAssociationArgs | QualitygateProjectAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QualitygateProjectAssociationState | undefined;
            resourceInputs["gateid"] = state ? state.gateid : undefined;
            resourceInputs["gatename"] = state ? state.gatename : undefined;
            resourceInputs["projectkey"] = state ? state.projectkey : undefined;
        } else {
            const args = argsOrState as QualitygateProjectAssociationArgs | undefined;
            if ((!args || args.projectkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectkey'");
            }
            resourceInputs["gateid"] = args ? args.gateid : undefined;
            resourceInputs["gatename"] = args ? args.gatename : undefined;
            resourceInputs["projectkey"] = args ? args.projectkey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QualitygateProjectAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QualitygateProjectAssociation resources.
 */
export interface QualitygateProjectAssociationState {
    gateid?: pulumi.Input<string>;
    gatename?: pulumi.Input<string>;
    projectkey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QualitygateProjectAssociation resource.
 */
export interface QualitygateProjectAssociationArgs {
    gateid?: pulumi.Input<string>;
    gatename?: pulumi.Input<string>;
    projectkey: pulumi.Input<string>;
}
