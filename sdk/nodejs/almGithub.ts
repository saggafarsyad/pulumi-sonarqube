// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # sonarqube.AlmGithub
 *
 * Provides a Sonarqube GitHub Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops
 * Platform Integration for GitHub.
 *
 * ## Example: Create a GitHub Alm Integration
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const github_alm = new sonarqube.AlmGithub("github-alm", {
 *     appId: "12345",
 *     clientId: "56789",
 *     clientSecret: "secret",
 *     key: "myalm",
 *     privateKey: "myprivate_key",
 *     url: "https://api.github.com",
 *     webhookSecret: "mysecret",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class AlmGithub extends pulumi.CustomResource {
    /**
     * Get an existing AlmGithub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlmGithubState, opts?: pulumi.CustomResourceOptions): AlmGithub {
        return new AlmGithub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarqube:index/almGithub:AlmGithub';

    /**
     * Returns true if the given object is an instance of AlmGithub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlmGithub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlmGithub.__pulumiType;
    }

    public readonly appId!: pulumi.Output<string>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;
    public readonly webhookSecret!: pulumi.Output<string | undefined>;

    /**
     * Create a AlmGithub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlmGithubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlmGithubArgs | AlmGithubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlmGithubState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["webhookSecret"] = state ? state.webhookSecret : undefined;
        } else {
            const args = argsOrState as AlmGithubArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["webhookSecret"] = args ? args.webhookSecret : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlmGithub.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlmGithub resources.
 */
export interface AlmGithubState {
    appId?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    webhookSecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlmGithub resource.
 */
export interface AlmGithubArgs {
    appId: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    key: pulumi.Input<string>;
    privateKey: pulumi.Input<string>;
    url: pulumi.Input<string>;
    webhookSecret?: pulumi.Input<string>;
}
