// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # sonarqube.Permissions
 *
 * Provides a Sonarqube Permissions resource. This can be used to manage global and project permissions.
 *
 * ## Example: Set global admin permissions for a group called "my-admins"
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const myGlobalAdmins = new sonarqube.Permissions("myGlobalAdmins", {
 *     groupName: "my-admins",
 *     permissions: ["admin"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Example: Set project admin permissions for a group called "my-project-admins"
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const myProjectAdmins = new sonarqube.Permissions("myProjectAdmins", {
 *     groupName: "my-project-admins",
 *     permissions: ["admin"],
 *     projectKey: "my-project",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Example: Set project admin permissions for a group called "my-project-admins on a permission template"
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const internalAdmins = new sonarqube.Permissions("internalAdmins", {
 *     groupName: "my-internal-admins",
 *     templateId: sonarqube_permission_template.template.id,
 *     permissions: ["admin"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Example: Set codeviewer & user permissions on project level for a user called "johndoe"
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const johnProjectRead = new sonarqube.Permissions("johnProjectRead", {
 *     loginName: "johndoe",
 *     permissions: [
 *         "codeviewer",
 *         "user",
 *     ],
 *     projectKey: "my-project",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Importing is not supported for the `sonarqube_permissions` resource.
 */
export class Permissions extends pulumi.CustomResource {
    /**
     * Get an existing Permissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionsState, opts?: pulumi.CustomResourceOptions): Permissions {
        return new Permissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarqube:index/permissions:Permissions';

    /**
     * Returns true if the given object is an instance of Permissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permissions.__pulumiType;
    }

    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly loginName!: pulumi.Output<string | undefined>;
    public readonly permissions!: pulumi.Output<string[]>;
    public readonly projectKey!: pulumi.Output<string | undefined>;
    public readonly templateId!: pulumi.Output<string | undefined>;
    public readonly templateName!: pulumi.Output<string | undefined>;

    /**
     * Create a Permissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionsArgs | PermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionsState | undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
        } else {
            const args = argsOrState as PermissionsArgs | undefined;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Permissions resources.
 */
export interface PermissionsState {
    groupName?: pulumi.Input<string>;
    loginName?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    projectKey?: pulumi.Input<string>;
    templateId?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Permissions resource.
 */
export interface PermissionsArgs {
    groupName?: pulumi.Input<string>;
    loginName?: pulumi.Input<string>;
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    projectKey?: pulumi.Input<string>;
    templateId?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
}
