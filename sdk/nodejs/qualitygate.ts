// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # sonarqube.Qualitygate
 *
 * Provides a Sonarqube Quality Gate resource. This can be used to create and manage Sonarqube Quality Gates and their Conditions.
 *
 * ## Example: create a quality gate
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const main = new sonarqube.Qualitygate("main", {
 *     conditions: [
 *         {
 *             metric: "new_coverage",
 *             op: "LT",
 *             threshold: "50",
 *         },
 *         {
 *             metric: "vulnerabilities",
 *             op: "GT",
 *             threshold: "10",
 *         },
 *     ],
 *     isDefault: true,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Quality Gates can be imported using its name
 *
 * terraform
 *
 * ```sh
 * $ pulumi import sonarqube:index/qualitygate:Qualitygate main my-cool-gate
 * ```
 */
export class Qualitygate extends pulumi.CustomResource {
    /**
     * Get an existing Qualitygate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QualitygateState, opts?: pulumi.CustomResourceOptions): Qualitygate {
        return new Qualitygate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarqube:index/qualitygate:Qualitygate';

    /**
     * Returns true if the given object is an instance of Qualitygate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Qualitygate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Qualitygate.__pulumiType;
    }

    /**
     * A list of conditions that the gate uses
     */
    public readonly conditions!: pulumi.Output<outputs.QualitygateCondition[] | undefined>;
    public readonly copyFrom!: pulumi.Output<string | undefined>;
    /**
     * When set to true this Quality Gate is set as default
     */
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Qualitygate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: QualitygateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QualitygateArgs | QualitygateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QualitygateState | undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["copyFrom"] = state ? state.copyFrom : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as QualitygateArgs | undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["copyFrom"] = args ? args.copyFrom : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Qualitygate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Qualitygate resources.
 */
export interface QualitygateState {
    /**
     * A list of conditions that the gate uses
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.QualitygateCondition>[]>;
    copyFrom?: pulumi.Input<string>;
    /**
     * When set to true this Quality Gate is set as default
     */
    isDefault?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Qualitygate resource.
 */
export interface QualitygateArgs {
    /**
     * A list of conditions that the gate uses
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.QualitygateCondition>[]>;
    copyFrom?: pulumi.Input<string>;
    /**
     * When set to true this Quality Gate is set as default
     */
    isDefault?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
}
