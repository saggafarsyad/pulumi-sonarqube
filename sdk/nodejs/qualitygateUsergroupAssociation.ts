// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # sonarqube.QualitygateUsergroupAssociation
 *
 * Provides a Sonarqube Quality Gate Usergroup association resource. This can be used to associate a Quality Gate to an User or to a Group.
 * The feature is available on SonarQube 9.2 or newer.
 *
 * ## Example: create a quality gate group association
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const mainQualitygate = new sonarqube.Qualitygate("mainQualitygate", {conditions: [{
 *     metric: "new_coverage",
 *     op: "LT",
 *     threshold: "30",
 * }]});
 * const qaTeam = new sonarqube.Group("qaTeam", {description: "Quality Assurence Team"});
 * const mainQualitygateUsergroupAssociation = new sonarqube.QualitygateUsergroupAssociation("mainQualitygateUsergroupAssociation", {
 *     gatename: mainQualitygate.id,
 *     groupName: qaTeam.name,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Example: create a quality gate user association
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const mainQualitygate = new sonarqube.Qualitygate("mainQualitygate", {conditions: [{
 *     metric: "new_coverage",
 *     op: "LT",
 *     threshold: "30",
 * }]});
 * const qaUser = new sonarqube.User("qaUser", {
 *     loginName: "qa-user",
 *     password: "secret-sauce37!",
 * });
 * const mainQualitygateUsergroupAssociation = new sonarqube.QualitygateUsergroupAssociation("mainQualitygateUsergroupAssociation", {
 *     gatename: mainQualitygate.id,
 *     loginName: qaUser.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Import is not required because SonarQube overwrites existing associations.
 */
export class QualitygateUsergroupAssociation extends pulumi.CustomResource {
    /**
     * Get an existing QualitygateUsergroupAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QualitygateUsergroupAssociationState, opts?: pulumi.CustomResourceOptions): QualitygateUsergroupAssociation {
        return new QualitygateUsergroupAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation';

    /**
     * Returns true if the given object is an instance of QualitygateUsergroupAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QualitygateUsergroupAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QualitygateUsergroupAssociation.__pulumiType;
    }

    /**
     * The name of the Quality Gate
     */
    public readonly gatename!: pulumi.Output<string>;
    /**
     * The name of the Group to associate. Either `groupName` or `loginName` should be provided.
     */
    public readonly groupName!: pulumi.Output<string | undefined>;
    /**
     * The name of the User to associate. Either `groupName` or `loginName` should be provided.
     */
    public readonly loginName!: pulumi.Output<string | undefined>;

    /**
     * Create a QualitygateUsergroupAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QualitygateUsergroupAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QualitygateUsergroupAssociationArgs | QualitygateUsergroupAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QualitygateUsergroupAssociationState | undefined;
            resourceInputs["gatename"] = state ? state.gatename : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
        } else {
            const args = argsOrState as QualitygateUsergroupAssociationArgs | undefined;
            if ((!args || args.gatename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatename'");
            }
            resourceInputs["gatename"] = args ? args.gatename : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QualitygateUsergroupAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QualitygateUsergroupAssociation resources.
 */
export interface QualitygateUsergroupAssociationState {
    /**
     * The name of the Quality Gate
     */
    gatename?: pulumi.Input<string>;
    /**
     * The name of the Group to associate. Either `groupName` or `loginName` should be provided.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The name of the User to associate. Either `groupName` or `loginName` should be provided.
     */
    loginName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QualitygateUsergroupAssociation resource.
 */
export interface QualitygateUsergroupAssociationArgs {
    /**
     * The name of the Quality Gate
     */
    gatename: pulumi.Input<string>;
    /**
     * The name of the Group to associate. Either `groupName` or `loginName` should be provided.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The name of the User to associate. Either `groupName` or `loginName` should be provided.
     */
    loginName?: pulumi.Input<string>;
}
