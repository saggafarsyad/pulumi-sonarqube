# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['QualityprofileActivateRuleArgs', 'QualityprofileActivateRule']

@pulumi.input_type
class QualityprofileActivateRuleArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 rule: pulumi.Input[str],
                 params: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a QualityprofileActivateRule resource.
        :param pulumi.Input[str] key: Quality Profile key. Can be obtained through api/qualityprofiles/search
        :param pulumi.Input[str] rule: Rule key
        :param pulumi.Input[str] params: Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
        :param pulumi.Input[str] reset: Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
        :param pulumi.Input[str] severity: Rule severity
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "rule", rule)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Quality Profile key. Can be obtained through api/qualityprofiles/search
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        """
        Rule key
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[str]]:
        """
        Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[str]]:
        """
        Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reset", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Rule severity
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class _QualityprofileActivateRuleState:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering QualityprofileActivateRule resources.
        :param pulumi.Input[str] key: Quality Profile key. Can be obtained through api/qualityprofiles/search
        :param pulumi.Input[str] params: Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
        :param pulumi.Input[str] reset: Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
        :param pulumi.Input[str] rule: Rule key
        :param pulumi.Input[str] severity: Rule severity
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Quality Profile key. Can be obtained through api/qualityprofiles/search
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[str]]:
        """
        Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[str]]:
        """
        Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reset", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[str]]:
        """
        Rule key
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Rule severity
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


class QualityprofileActivateRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # QualityprofileActivateRule

        Provides a Sonarqube Rules resource. This can be used to manage Sonarqube rules.

        ## Example: activate a rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_sonarqube as sonarqube

        allowed_maven_dependencies = sonarqube.Rule("allowedMavenDependencies",
            custom_key="Only_use_allowed_Maven_dependencies",
            markdown_description="Description",
            params="FilePattern=**/pom.xml",
            severity="BLOCKER",
            status="READY",
            template_key="xml:XPathCheck",
            type="VULNERABILITY")
        xml = sonarqube.Qualityprofile("xml",
            language="xml",
            is_default=False,
            parent="Sonar way")
        xml_rule = sonarqube.QualityprofileActivateRule("xmlRule",
            key=xml.key,
            rule=allowed_maven_dependencies.id,
            severity="BLOCKER")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: Quality Profile key. Can be obtained through api/qualityprofiles/search
        :param pulumi.Input[str] params: Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
        :param pulumi.Input[str] reset: Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
        :param pulumi.Input[str] rule: Rule key
        :param pulumi.Input[str] severity: Rule severity
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QualityprofileActivateRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # QualityprofileActivateRule

        Provides a Sonarqube Rules resource. This can be used to manage Sonarqube rules.

        ## Example: activate a rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_sonarqube as sonarqube

        allowed_maven_dependencies = sonarqube.Rule("allowedMavenDependencies",
            custom_key="Only_use_allowed_Maven_dependencies",
            markdown_description="Description",
            params="FilePattern=**/pom.xml",
            severity="BLOCKER",
            status="READY",
            template_key="xml:XPathCheck",
            type="VULNERABILITY")
        xml = sonarqube.Qualityprofile("xml",
            language="xml",
            is_default=False,
            parent="Sonar way")
        xml_rule = sonarqube.QualityprofileActivateRule("xmlRule",
            key=xml.key,
            rule=allowed_maven_dependencies.id,
            severity="BLOCKER")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param QualityprofileActivateRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QualityprofileActivateRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QualityprofileActivateRuleArgs.__new__(QualityprofileActivateRuleArgs)

            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["params"] = params
            __props__.__dict__["reset"] = reset
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
            __props__.__dict__["severity"] = severity
        super(QualityprofileActivateRule, __self__).__init__(
            'sonarqube:index/qualityprofileActivateRule:QualityprofileActivateRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key: Optional[pulumi.Input[str]] = None,
            params: Optional[pulumi.Input[str]] = None,
            reset: Optional[pulumi.Input[str]] = None,
            rule: Optional[pulumi.Input[str]] = None,
            severity: Optional[pulumi.Input[str]] = None) -> 'QualityprofileActivateRule':
        """
        Get an existing QualityprofileActivateRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: Quality Profile key. Can be obtained through api/qualityprofiles/search
        :param pulumi.Input[str] params: Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
        :param pulumi.Input[str] reset: Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
        :param pulumi.Input[str] rule: Rule key
        :param pulumi.Input[str] severity: Rule severity
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QualityprofileActivateRuleState.__new__(_QualityprofileActivateRuleState)

        __props__.__dict__["key"] = key
        __props__.__dict__["params"] = params
        __props__.__dict__["reset"] = reset
        __props__.__dict__["rule"] = rule
        __props__.__dict__["severity"] = severity
        return QualityprofileActivateRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        Quality Profile key. Can be obtained through api/qualityprofiles/search
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def params(self) -> pulumi.Output[Optional[str]]:
        """
        Parameters as semi-colon list of =, for example 'params=key1=v1;key2=v2' (Only for custom rule)
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def reset(self) -> pulumi.Output[Optional[str]]:
        """
        Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
        """
        return pulumi.get(self, "reset")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output[str]:
        """
        Rule key
        """
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[Optional[str]]:
        """
        Rule severity
        """
        return pulumi.get(self, "severity")

