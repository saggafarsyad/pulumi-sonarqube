# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'PortfolioSelectedProjectArgs',
    'ProjectSettingArgs',
    'QualitygateConditionArgs',
]

@pulumi.input_type
class PortfolioSelectedProjectArgs:
    def __init__(__self__, *,
                 project_key: pulumi.Input[str],
                 selected_branches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] project_key: The key of a project to add to the portfolio
        :param pulumi.Input[Sequence[pulumi.Input[str]]] selected_branches: A list of branches of the project to add to the portfolio. Defaults to the `MAIN BRANCH` of the repo if omitted
               
               Here is an example of how this option can be leveraged:
        """
        pulumi.set(__self__, "project_key", project_key)
        if selected_branches is not None:
            pulumi.set(__self__, "selected_branches", selected_branches)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[str]:
        """
        The key of a project to add to the portfolio
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter(name="selectedBranches")
    def selected_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of branches of the project to add to the portfolio. Defaults to the `MAIN BRANCH` of the repo if omitted

        Here is an example of how this option can be leveraged:
        """
        return pulumi.get(self, "selected_branches")

    @selected_branches.setter
    def selected_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_branches", value)


@pulumi.input_type
class ProjectSettingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 field_values: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: Setting key
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] field_values: Setting field values for the supplied key
        :param pulumi.Input[str] value: Setting a value for the supplied key
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Setting multi values for the supplied key
        """
        pulumi.set(__self__, "key", key)
        if field_values is not None:
            pulumi.set(__self__, "field_values", field_values)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Setting key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="fieldValues")
    def field_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Setting field values for the supplied key
        """
        return pulumi.get(self, "field_values")

    @field_values.setter
    def field_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "field_values", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Setting a value for the supplied key
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Setting multi values for the supplied key
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class QualitygateConditionArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 op: pulumi.Input[str],
                 threshold: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "threshold", threshold)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[str]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[str]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


