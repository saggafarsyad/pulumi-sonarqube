# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['QualitygateArgs', 'Qualitygate']

@pulumi.input_type
class QualitygateArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Qualitygate resource.
        :param pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]] conditions: A list of conditions that the gate uses
        :param pulumi.Input[bool] is_default: When set to true this Quality Gate is set as default
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if copy_from is not None:
            pulumi.set(__self__, "copy_from", copy_from)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]]]:
        """
        A list of conditions that the gate uses
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "copy_from")

    @copy_from.setter
    def copy_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true this Quality Gate is set as default
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _QualitygateState:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Qualitygate resources.
        :param pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]] conditions: A list of conditions that the gate uses
        :param pulumi.Input[bool] is_default: When set to true this Quality Gate is set as default
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if copy_from is not None:
            pulumi.set(__self__, "copy_from", copy_from)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]]]:
        """
        A list of conditions that the gate uses
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QualitygateConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "copy_from")

    @copy_from.setter
    def copy_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true this Quality Gate is set as default
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class Qualitygate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QualitygateConditionArgs']]]]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # Qualitygate

        Provides a Sonarqube Quality Gate resource. This can be used to create and manage Sonarqube Quality Gates and their Conditions.

        ## Example: create a quality gate

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_sonarqube as sonarqube

        main = sonarqube.Qualitygate("main",
            conditions=[
                sonarqube.QualitygateConditionArgs(
                    metric="new_coverage",
                    op="LT",
                    threshold="50",
                ),
                sonarqube.QualitygateConditionArgs(
                    metric="vulnerabilities",
                    op="GT",
                    threshold="10",
                ),
            ],
            is_default=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Quality Gates can be imported using its name

        terraform

        ```sh
        $ pulumi import sonarqube:index/qualitygate:Qualitygate main my-cool-gate
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QualitygateConditionArgs']]]] conditions: A list of conditions that the gate uses
        :param pulumi.Input[bool] is_default: When set to true this Quality Gate is set as default
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[QualitygateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Qualitygate

        Provides a Sonarqube Quality Gate resource. This can be used to create and manage Sonarqube Quality Gates and their Conditions.

        ## Example: create a quality gate

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_sonarqube as sonarqube

        main = sonarqube.Qualitygate("main",
            conditions=[
                sonarqube.QualitygateConditionArgs(
                    metric="new_coverage",
                    op="LT",
                    threshold="50",
                ),
                sonarqube.QualitygateConditionArgs(
                    metric="vulnerabilities",
                    op="GT",
                    threshold="10",
                ),
            ],
            is_default=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Quality Gates can be imported using its name

        terraform

        ```sh
        $ pulumi import sonarqube:index/qualitygate:Qualitygate main my-cool-gate
        ```

        :param str resource_name: The name of the resource.
        :param QualitygateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QualitygateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QualitygateConditionArgs']]]]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QualitygateArgs.__new__(QualitygateArgs)

            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["copy_from"] = copy_from
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["name"] = name
        super(Qualitygate, __self__).__init__(
            'sonarqube:index/qualitygate:Qualitygate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QualitygateConditionArgs']]]]] = None,
            copy_from: Optional[pulumi.Input[str]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'Qualitygate':
        """
        Get an existing Qualitygate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QualitygateConditionArgs']]]] conditions: A list of conditions that the gate uses
        :param pulumi.Input[bool] is_default: When set to true this Quality Gate is set as default
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QualitygateState.__new__(_QualitygateState)

        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["copy_from"] = copy_from
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["name"] = name
        return Qualitygate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.QualitygateCondition']]]:
        """
        A list of conditions that the gate uses
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "copy_from")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[Optional[bool]]:
        """
        When set to true this Quality Gate is set as default
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

