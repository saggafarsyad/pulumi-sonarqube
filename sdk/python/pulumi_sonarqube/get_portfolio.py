# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPortfolioResult',
    'AwaitableGetPortfolioResult',
    'get_portfolio',
    'get_portfolio_output',
]

@pulumi.output_type
class GetPortfolioResult:
    """
    A collection of values returned by getPortfolio.
    """
    def __init__(__self__, branch=None, description=None, id=None, key=None, name=None, qualifier=None, regexp=None, selection_mode=None, tags=None, visibility=None):
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if qualifier and not isinstance(qualifier, str):
            raise TypeError("Expected argument 'qualifier' to be a str")
        pulumi.set(__self__, "qualifier", qualifier)
        if regexp and not isinstance(regexp, str):
            raise TypeError("Expected argument 'regexp' to be a str")
        pulumi.set(__self__, "regexp", regexp)
        if selection_mode and not isinstance(selection_mode, str):
            raise TypeError("Expected argument 'selection_mode' to be a str")
        pulumi.set(__self__, "selection_mode", selection_mode)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def branch(self) -> str:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def qualifier(self) -> str:
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter(name="selectionMode")
    def selection_mode(self) -> str:
        return pulumi.get(self, "selection_mode")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        return pulumi.get(self, "visibility")


class AwaitableGetPortfolioResult(GetPortfolioResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortfolioResult(
            branch=self.branch,
            description=self.description,
            id=self.id,
            key=self.key,
            name=self.name,
            qualifier=self.qualifier,
            regexp=self.regexp,
            selection_mode=self.selection_mode,
            tags=self.tags,
            visibility=self.visibility)


def get_portfolio(key: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortfolioResult:
    """
    ## # Data Source: Portfolio

    Use this data source to get a Sonarqube portfolio resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_sonarqube as sonarqube

    portfolio = sonarqube.get_portfolio(key="portfolio-key")
    ```
    <!--End PulumiCodeChooser -->
    """
    __args__ = dict()
    __args__['key'] = key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarqube:index/getPortfolio:getPortfolio', __args__, opts=opts, typ=GetPortfolioResult).value

    return AwaitableGetPortfolioResult(
        branch=pulumi.get(__ret__, 'branch'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        name=pulumi.get(__ret__, 'name'),
        qualifier=pulumi.get(__ret__, 'qualifier'),
        regexp=pulumi.get(__ret__, 'regexp'),
        selection_mode=pulumi.get(__ret__, 'selection_mode'),
        tags=pulumi.get(__ret__, 'tags'),
        visibility=pulumi.get(__ret__, 'visibility'))


@_utilities.lift_output_func(get_portfolio)
def get_portfolio_output(key: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPortfolioResult]:
    """
    ## # Data Source: Portfolio

    Use this data source to get a Sonarqube portfolio resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_sonarqube as sonarqube

    portfolio = sonarqube.get_portfolio(key="portfolio-key")
    ```
    <!--End PulumiCodeChooser -->
    """
    ...
